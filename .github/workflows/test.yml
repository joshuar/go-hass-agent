name: Test

on:
  push:
    branches: [ main ]
  pull_request:
      branches: [ main ]

permissions:
  contents: read

env:
  GO_VERSION: 1.22

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs      
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install build dependencies
        id: install_packages
        run: >
            sudo apt-get update && sudo apt-get -y install
            desktop-file-utils gcc
            libgl1-mesa-dev xserver-xorg-dev 
            libxcursor-dev libxrandr-dev
            libxinerama-dev libxi-dev
            libgl1-mesa-dev libxxf86vm-dev 
            > ${RUNNER_TEMP}/dpkg.log
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set up Go
        id: setup_go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Go dependencies
        id: install_go_deps
        run: |
          go install golang.org/x/tools/cmd/stringer@latest
          go install golang.org/x/text/cmd/gotext@latest
          go install github.com/matryer/moq@latest
      - name: Run go generate
        id: go_generate
        run: go generate -v ./...
      - name: Run go build
        id: go_build
        run: go build -v       
      - name: Run go test
        id: go_test
        run: go test -v -coverprofile=coverage.txt ./...
        continue-on-error: true
      - name: Upload Coverage
        id: upload_coverage
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.txt
          fail_ci_if_error: false
          name: golangci-lint

  golangci:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read # Use with `only-new-issues` option.
    steps:
      - uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      - uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false # golangci-lint maintains its own cache
      - name: Install Go dependencies
        id: install_go_deps
        run: |
          go install golang.org/x/tools/cmd/stringer@latest
          go install golang.org/x/text/cmd/gotext@latest
          go install github.com/matryer/moq@latest
      - name: Run go generate
        id: go_generate
        run: go generate -v ./...
      - name: set golangci-lint version # keep in sync with tools/go.mod
        run: |
          echo "GOLANGCI_LINT_VERSION=$(cd tools; go list -m -f '{{ .Version }}' github.com/golangci/golangci-lint)" >> "$GITHUB_ENV"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@a4f60bb28d35aeee14e6880718e0c85ff1882e64 # v6.0.1
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          only-new-issues: true
