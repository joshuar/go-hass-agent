name: Build

on:
  workflow_run:
    workflows: ["test"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "build"
  cancel-in-progress: true

jobs:
  check_release:
    permissions:
      contents: write
      pull-requests: write
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    outputs:
      release_created: ${{ steps.release_please.outputs.release_created }}
      release_tag: ${{ steps.release_please.outputs.tag_name }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Run release please
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c # v4
        id: release_please
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check_release
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - platform: linux/arm/v6
            goarch: arm
            goarm: 6
          - platform: linux/arm/v7
            goarch: arm
            goarm: 7
          - platform: linux/arm64
            goarch: arm64
          - platform: linux/amd64
            goarch: amd64
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
          disable-sudo: false
          allowed-endpoints: >
            api.github.com:443
            auth.docker.io:443
            azure.archive.ubuntu.com:80
            esm.ubuntu.com:443
            fyne.io:443
            github.com:443
            go.dev:443
            go.googlesource.com:443
            golang.org:443
            gopkg.in:443
            motd.ubuntu.com:443
            objects.githubusercontent.com:443
            packages.microsoft.com:443
            pkg.go.dev:443
            ports.ubuntu.com:80
            production.cloudflare.docker.com:443
            proxy.golang.org:443
            raw.githubusercontent.com:443
            registry-1.docker.io:443
            rekor.sigstore.dev:443
            storage.googleapis.com:443
            sum.golang.org:443
            uploads.github.com:443
            release-assets.githubusercontent.com:443
      - name: Checkout source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0
      - name: Set up environment
        run: |
          if [ -n "${{matrix.goarm}}" ]; then
            echo NFPM_ARCH=${{matrix.goarch}}v${{matrix.goarm}} >> $GITHUB_ENV
          else
            echo NFPM_ARCH=${{matrix.goarch}} >> $GITHUB_ENV
          fi
          echo "APPVERSION=$(git describe --tags --always --long --dirty)" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Set app version for release
        if: ${{ needs.check_release.outputs.release_created }}
        run: |
          echo "APPVERSION=${{ needs.check_release.outputs.release_tag }}" >> $GITHUB_ENV
      - name: Setup Go
        id: setup_go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5
        with:
          go-version-file: "go.mod"
      - name: Setup bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
      - name: Build frontend files
        run: |
          bun install
          bunx esbuild ./web/assets/scripts.js --bundle --minify --outdir=./web/content/
          bunx tailwindcss -i ./web/assets/styles.css -o ./web/content/styles.css --minify
      - name: Build binary
        run: |
          go build -ldflags="-w -s -X github.com/joshuar/go-hass-agent/config.AppVersion=${{ env.APPVERSION }}" -o dist/go-hass-agent
        env:
          CGO_ENABLED: 0
          GOARCH: ${{matrix.goarch}}
          GOARM: ${{matrix.goarm}}

      - name: Install upx
        run: sudo apt install -y upx

      - name: Compress binary with upx
        run: upx --best --lzma dist/go-hass-agent

      - name: Package
        run: |
          for format in rpm deb archlinux; do
            go run github.com/goreleaser/nfpm/v2/cmd/nfpm@latest package --packager ${format} --config .nfpm.yaml --target dist
          done
      - name: Install cosign
        id: cosign_install
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3
      - name: Sign artifacts with cosign
        id: cosign_sign
        shell: bash
        run: |
          shopt -s nullglob
          echo Need to sign dist/*.{rpm,deb,zst}
          for artifact in dist/*.{rpm,deb,zst}; do
            echo Signing ${artifact}
            cosign --verbose=true sign-blob --yes --key cosign.key --output-signature=${artifact}.sig ${artifact}
          done
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      - name: Upload build artifacts
        id: upload_artifacts
        if: ${{ ! needs.check_release.outputs.release_created }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-${{ env.PLATFORM_PAIR }}-${{ env.APPVERSION }}.zip
          path: |
            dist/*.rpm
            dist/*.deb
            dist/*.zst
      - name: Upload release artifacts
        id: upload_release
        if: ${{ needs.check_release.outputs.release_created }}
        run: |
          gh release upload ${{ needs.check_release.outputs.release_tag }} dist/*.{rpm,deb,zst,sig}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_container:
    needs: check_release
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-24.04
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            auth.docker.io:443
            dl-cdn.alpinelinux.org:443
            ghcr.io:443
            github.com:443
            production.cloudflare.docker.com:443
            proxy.golang.org:443
            registry-1.docker.io:443
            storage.googleapis.com:443
            sum.golang.org:443
            release-assets.githubusercontent.com:443

      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0

      - name: Set up environment
        run: |
          echo "APPVERSION=$(git describe --tags --always --dirty)" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set app version for release
        if: ${{ needs.check_release.outputs.release_created }}
        run: echo "APPVERSION=${{ needs.check_release.outputs.release_tag }}" >> $GITHUB_ENV

      - name: Check and install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3

      - name: Log in to the Container registry
        id: registry_login
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Docker metadata
        id: docker_metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ env.APPVERSION }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Build container image
        id: build_and_push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v5
        with:
          context: .
          labels: ${{ steps.docker_metadata.outputs.labels }}
          annotations: ${{ steps.docker_metadata.outputs.annotations }}
          tags: ${{ steps.docker_metadata.outputs.tags }}
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE }},push=true
          build-args: |
            APPVERSION=${{ env.APPVERSION }}

      - name: Sign image with a key
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key cosign.key ${images}
        env:
          TAGS: ${{ steps.docker_metadata.outputs.tags }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build_and_push.outputs.digest }}
