// Code generated by "stringer -type=sensorType,level,chargingState,typeDescription -output types_generated.go -linecomment"; DO NOT EDIT.

package battery

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[typeDesc-0]
	_ = x[typePercentage-1]
	_ = x[typeTemp-2]
	_ = x[typeVoltage-3]
	_ = x[typeEnergy-4]
	_ = x[typeEnergyRate-5]
	_ = x[typeState-6]
	_ = x[typeNativePath-7]
	_ = x[typeLevel-8]
	_ = x[typeModel-9]
}

const _sensorType_name = "Battery TypeBattery LevelBattery TemperatureBattery VoltageBattery EnergyBattery PowerBattery StateBattery PathBattery LevelBattery Model"

var _sensorType_index = [...]uint8{0, 12, 25, 44, 59, 73, 86, 99, 111, 124, 137}

func (i sensorType) String() string {
	if i < 0 || i >= sensorType(len(_sensorType_index)-1) {
		return "sensorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _sensorType_name[_sensorType_index[i]:_sensorType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[levelUnknown-0]
	_ = x[levelNone-1]
	_ = x[levelLow-3]
	_ = x[levelCrit-4]
	_ = x[levelNorm-6]
	_ = x[levelHigh-7]
	_ = x[levelFull-8]
}

const (
	_level_name_0 = "UnknownNone"
	_level_name_1 = "LowCritical"
	_level_name_2 = "NormalHighFull"
)

var (
	_level_index_0 = [...]uint8{0, 7, 11}
	_level_index_1 = [...]uint8{0, 3, 11}
	_level_index_2 = [...]uint8{0, 6, 10, 14}
)

func (i level) String() string {
	switch {
	case i <= 1:
		return _level_name_0[_level_index_0[i]:_level_index_0[i+1]]
	case 3 <= i && i <= 4:
		i -= 3
		return _level_name_1[_level_index_1[i]:_level_index_1[i+1]]
	case 6 <= i && i <= 8:
		i -= 6
		return _level_name_2[_level_index_2[i]:_level_index_2[i+1]]
	default:
		return "level(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[stateUnknown-0]
	_ = x[stateCharging-1]
	_ = x[stateDischarging-2]
	_ = x[stateEmpty-3]
	_ = x[stateFullyCharged-4]
	_ = x[statePendingCharge-5]
	_ = x[statePendingDischarge-6]
}

const _chargingState_name = "UnknownChargingDischargingEmptyFully ChargedPending ChargePending Discharge"

var _chargingState_index = [...]uint8{0, 7, 15, 26, 31, 44, 58, 75}

func (i chargingState) String() string {
	if i >= chargingState(len(_chargingState_index)-1) {
		return "chargingState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _chargingState_name[_chargingState_index[i]:_chargingState_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[linePowerType-1]
	_ = x[batteryType-2]
	_ = x[upsType-3]
	_ = x[monitorType-4]
	_ = x[mouseType-5]
	_ = x[keyboardType-6]
	_ = x[pdaType-7]
	_ = x[phoneType-8]
}

const _typeDescription_name = "Line PowerBatteryUPSMonitorMouseKeyboardPdaPhone"

var _typeDescription_index = [...]uint8{0, 10, 17, 20, 27, 32, 40, 43, 48}

func (i typeDescription) String() string {
	i -= 1
	if i >= typeDescription(len(_typeDescription_index)-1) {
		return "typeDescription(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _typeDescription_name[_typeDescription_index[i]:_typeDescription_index[i+1]]
}
