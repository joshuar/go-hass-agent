// Code generated by mockery v2.43.2. DO NOT EDIT.

package testing

import (
	mqtt "github.com/joshuar/go-hass-anything/v9/pkg/mqtt"
	mock "github.com/stretchr/testify/mock"
)

// MockMQTTController is an autogenerated mock type for the MQTTController type
type MockMQTTController struct {
	mock.Mock
}

type MockMQTTController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMQTTController) EXPECT() *MockMQTTController_Expecter {
	return &MockMQTTController_Expecter{mock: &_m.Mock}
}

// Configs provides a mock function with given fields:
func (_m *MockMQTTController) Configs() []*mqtt.Msg {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configs")
	}

	var r0 []*mqtt.Msg
	if rf, ok := ret.Get(0).(func() []*mqtt.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mqtt.Msg)
		}
	}

	return r0
}

// MockMQTTController_Configs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configs'
type MockMQTTController_Configs_Call struct {
	*mock.Call
}

// Configs is a helper method to define mock.On call
func (_e *MockMQTTController_Expecter) Configs() *MockMQTTController_Configs_Call {
	return &MockMQTTController_Configs_Call{Call: _e.mock.On("Configs")}
}

func (_c *MockMQTTController_Configs_Call) Run(run func()) *MockMQTTController_Configs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMQTTController_Configs_Call) Return(_a0 []*mqtt.Msg) *MockMQTTController_Configs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQTTController_Configs_Call) RunAndReturn(run func() []*mqtt.Msg) *MockMQTTController_Configs_Call {
	_c.Call.Return(run)
	return _c
}

// Msgs provides a mock function with given fields:
func (_m *MockMQTTController) Msgs() chan *mqtt.Msg {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Msgs")
	}

	var r0 chan *mqtt.Msg
	if rf, ok := ret.Get(0).(func() chan *mqtt.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *mqtt.Msg)
		}
	}

	return r0
}

// MockMQTTController_Msgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Msgs'
type MockMQTTController_Msgs_Call struct {
	*mock.Call
}

// Msgs is a helper method to define mock.On call
func (_e *MockMQTTController_Expecter) Msgs() *MockMQTTController_Msgs_Call {
	return &MockMQTTController_Msgs_Call{Call: _e.mock.On("Msgs")}
}

func (_c *MockMQTTController_Msgs_Call) Run(run func()) *MockMQTTController_Msgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMQTTController_Msgs_Call) Return(_a0 chan *mqtt.Msg) *MockMQTTController_Msgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQTTController_Msgs_Call) RunAndReturn(run func() chan *mqtt.Msg) *MockMQTTController_Msgs_Call {
	_c.Call.Return(run)
	return _c
}

// Subscriptions provides a mock function with given fields:
func (_m *MockMQTTController) Subscriptions() []*mqtt.Subscription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subscriptions")
	}

	var r0 []*mqtt.Subscription
	if rf, ok := ret.Get(0).(func() []*mqtt.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mqtt.Subscription)
		}
	}

	return r0
}

// MockMQTTController_Subscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscriptions'
type MockMQTTController_Subscriptions_Call struct {
	*mock.Call
}

// Subscriptions is a helper method to define mock.On call
func (_e *MockMQTTController_Expecter) Subscriptions() *MockMQTTController_Subscriptions_Call {
	return &MockMQTTController_Subscriptions_Call{Call: _e.mock.On("Subscriptions")}
}

func (_c *MockMQTTController_Subscriptions_Call) Run(run func()) *MockMQTTController_Subscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMQTTController_Subscriptions_Call) Return(_a0 []*mqtt.Subscription) *MockMQTTController_Subscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQTTController_Subscriptions_Call) RunAndReturn(run func() []*mqtt.Subscription) *MockMQTTController_Subscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMQTTController creates a new instance of MockMQTTController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMQTTController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMQTTController {
	mock := &MockMQTTController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
