// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	"sync"
)

// Ensure, that AgentConfigMock does implement AgentConfig.
// If this is not the case, regenerate this file with moq.
var _ AgentConfig = &AgentConfigMock{}

// AgentConfigMock is a mock implementation of AgentConfig.
//
//	func TestSomethingThatUsesAgentConfig(t *testing.T) {
//
//		// make and configure a mocked AgentConfig
//		mockedAgentConfig := &AgentConfigMock{
//			DeleteFunc: func(s string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(s string, ifaceVal interface{}) error {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(s string, ifaceVal interface{}) error {
//				panic("mock out the Set method")
//			},
//			StoragePathFunc: func(s string) (string, error) {
//				panic("mock out the StoragePath method")
//			},
//		}
//
//		// use mockedAgentConfig in code that requires AgentConfig
//		// and then make assertions.
//
//	}
type AgentConfigMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(s string) error

	// GetFunc mocks the Get method.
	GetFunc func(s string, ifaceVal interface{}) error

	// SetFunc mocks the Set method.
	SetFunc func(s string, ifaceVal interface{}) error

	// StoragePathFunc mocks the StoragePath method.
	StoragePathFunc func(s string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// S is the s argument value.
			S string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
			// IfaceVal is the ifaceVal argument value.
			IfaceVal interface{}
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// S is the s argument value.
			S string
			// IfaceVal is the ifaceVal argument value.
			IfaceVal interface{}
		}
		// StoragePath holds details about calls to the StoragePath method.
		StoragePath []struct {
			// S is the s argument value.
			S string
		}
	}
	lockDelete      sync.RWMutex
	lockGet         sync.RWMutex
	lockSet         sync.RWMutex
	lockStoragePath sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *AgentConfigMock) Delete(s string) error {
	if mock.DeleteFunc == nil {
		panic("AgentConfigMock.DeleteFunc: method is nil but AgentConfig.Delete was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(s)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAgentConfig.DeleteCalls())
func (mock *AgentConfigMock) DeleteCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AgentConfigMock) Get(s string, ifaceVal interface{}) error {
	if mock.GetFunc == nil {
		panic("AgentConfigMock.GetFunc: method is nil but AgentConfig.Get was just called")
	}
	callInfo := struct {
		S        string
		IfaceVal interface{}
	}{
		S:        s,
		IfaceVal: ifaceVal,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s, ifaceVal)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAgentConfig.GetCalls())
func (mock *AgentConfigMock) GetCalls() []struct {
	S        string
	IfaceVal interface{}
} {
	var calls []struct {
		S        string
		IfaceVal interface{}
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *AgentConfigMock) Set(s string, ifaceVal interface{}) error {
	if mock.SetFunc == nil {
		panic("AgentConfigMock.SetFunc: method is nil but AgentConfig.Set was just called")
	}
	callInfo := struct {
		S        string
		IfaceVal interface{}
	}{
		S:        s,
		IfaceVal: ifaceVal,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(s, ifaceVal)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedAgentConfig.SetCalls())
func (mock *AgentConfigMock) SetCalls() []struct {
	S        string
	IfaceVal interface{}
} {
	var calls []struct {
		S        string
		IfaceVal interface{}
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// StoragePath calls StoragePathFunc.
func (mock *AgentConfigMock) StoragePath(s string) (string, error) {
	if mock.StoragePathFunc == nil {
		panic("AgentConfigMock.StoragePathFunc: method is nil but AgentConfig.StoragePath was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockStoragePath.Lock()
	mock.calls.StoragePath = append(mock.calls.StoragePath, callInfo)
	mock.lockStoragePath.Unlock()
	return mock.StoragePathFunc(s)
}

// StoragePathCalls gets all the calls that were made to StoragePath.
// Check the length with:
//
//	len(mockedAgentConfig.StoragePathCalls())
func (mock *AgentConfigMock) StoragePathCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockStoragePath.RLock()
	calls = mock.calls.StoragePath
	mock.lockStoragePath.RUnlock()
	return calls
}
