// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ui

import (
	"sync"
)

// Ensure, that AgentMock does implement Agent.
// If this is not the case, regenerate this file with moq.
var _ Agent = &AgentMock{}

// AgentMock is a mock implementation of Agent.
//
//	func TestSomethingThatUsesAgent(t *testing.T) {
//
//		// make and configure a mocked Agent
//		mockedAgent := &AgentMock{
//			StopFunc: func()  {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedAgent in code that requires Agent
//		// and then make assertions.
//
//	}
type AgentMock struct {
	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockStop sync.RWMutex
}

// Stop calls StopFunc.
func (mock *AgentMock) Stop() {
	if mock.StopFunc == nil {
		panic("AgentMock.StopFunc: method is nil but Agent.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedAgent.StopCalls())
func (mock *AgentMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
