// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ui

import (
	"context"
	"sync"
)

// Ensure, that AgentUIMock does implement AgentUI.
// If this is not the case, regenerate this file with moq.
var _ AgentUI = &AgentUIMock{}

// AgentUIMock is a mock implementation of AgentUI.
//
//	func TestSomethingThatUsesAgentUI(t *testing.T) {
//
//		// make and configure a mocked AgentUI
//		mockedAgentUI := &AgentUIMock{
//			DisplayNotificationFunc: func(s1 string, s2 string)  {
//				panic("mock out the DisplayNotification method")
//			},
//			DisplayRegistrationWindowFunc: func(contextMoqParam context.Context, agent Agent, valCh chan struct{})  {
//				panic("mock out the DisplayRegistrationWindow method")
//			},
//			DisplayTrayIconFunc: func(agent Agent)  {
//				panic("mock out the DisplayTrayIcon method")
//			},
//			RunFunc: func()  {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedAgentUI in code that requires AgentUI
//		// and then make assertions.
//
//	}
type AgentUIMock struct {
	// DisplayNotificationFunc mocks the DisplayNotification method.
	DisplayNotificationFunc func(s1 string, s2 string)

	// DisplayRegistrationWindowFunc mocks the DisplayRegistrationWindow method.
	DisplayRegistrationWindowFunc func(contextMoqParam context.Context, agent Agent, valCh chan struct{})

	// DisplayTrayIconFunc mocks the DisplayTrayIcon method.
	DisplayTrayIconFunc func(agent Agent)

	// RunFunc mocks the Run method.
	RunFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// DisplayNotification holds details about calls to the DisplayNotification method.
		DisplayNotification []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
		// DisplayRegistrationWindow holds details about calls to the DisplayRegistrationWindow method.
		DisplayRegistrationWindow []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Agent is the agent argument value.
			Agent Agent
			// ValCh is the valCh argument value.
			ValCh chan struct{}
		}
		// DisplayTrayIcon holds details about calls to the DisplayTrayIcon method.
		DisplayTrayIcon []struct {
			// Agent is the agent argument value.
			Agent Agent
		}
		// Run holds details about calls to the Run method.
		Run []struct {
		}
	}
	lockDisplayNotification       sync.RWMutex
	lockDisplayRegistrationWindow sync.RWMutex
	lockDisplayTrayIcon           sync.RWMutex
	lockRun                       sync.RWMutex
}

// DisplayNotification calls DisplayNotificationFunc.
func (mock *AgentUIMock) DisplayNotification(s1 string, s2 string) {
	if mock.DisplayNotificationFunc == nil {
		panic("AgentUIMock.DisplayNotificationFunc: method is nil but AgentUI.DisplayNotification was just called")
	}
	callInfo := struct {
		S1 string
		S2 string
	}{
		S1: s1,
		S2: s2,
	}
	mock.lockDisplayNotification.Lock()
	mock.calls.DisplayNotification = append(mock.calls.DisplayNotification, callInfo)
	mock.lockDisplayNotification.Unlock()
	mock.DisplayNotificationFunc(s1, s2)
}

// DisplayNotificationCalls gets all the calls that were made to DisplayNotification.
// Check the length with:
//
//	len(mockedAgentUI.DisplayNotificationCalls())
func (mock *AgentUIMock) DisplayNotificationCalls() []struct {
	S1 string
	S2 string
} {
	var calls []struct {
		S1 string
		S2 string
	}
	mock.lockDisplayNotification.RLock()
	calls = mock.calls.DisplayNotification
	mock.lockDisplayNotification.RUnlock()
	return calls
}

// DisplayRegistrationWindow calls DisplayRegistrationWindowFunc.
func (mock *AgentUIMock) DisplayRegistrationWindow(contextMoqParam context.Context, agent Agent, valCh chan struct{}) {
	if mock.DisplayRegistrationWindowFunc == nil {
		panic("AgentUIMock.DisplayRegistrationWindowFunc: method is nil but AgentUI.DisplayRegistrationWindow was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Agent           Agent
		ValCh           chan struct{}
	}{
		ContextMoqParam: contextMoqParam,
		Agent:           agent,
		ValCh:           valCh,
	}
	mock.lockDisplayRegistrationWindow.Lock()
	mock.calls.DisplayRegistrationWindow = append(mock.calls.DisplayRegistrationWindow, callInfo)
	mock.lockDisplayRegistrationWindow.Unlock()
	mock.DisplayRegistrationWindowFunc(contextMoqParam, agent, valCh)
}

// DisplayRegistrationWindowCalls gets all the calls that were made to DisplayRegistrationWindow.
// Check the length with:
//
//	len(mockedAgentUI.DisplayRegistrationWindowCalls())
func (mock *AgentUIMock) DisplayRegistrationWindowCalls() []struct {
	ContextMoqParam context.Context
	Agent           Agent
	ValCh           chan struct{}
} {
	var calls []struct {
		ContextMoqParam context.Context
		Agent           Agent
		ValCh           chan struct{}
	}
	mock.lockDisplayRegistrationWindow.RLock()
	calls = mock.calls.DisplayRegistrationWindow
	mock.lockDisplayRegistrationWindow.RUnlock()
	return calls
}

// DisplayTrayIcon calls DisplayTrayIconFunc.
func (mock *AgentUIMock) DisplayTrayIcon(agent Agent) {
	if mock.DisplayTrayIconFunc == nil {
		panic("AgentUIMock.DisplayTrayIconFunc: method is nil but AgentUI.DisplayTrayIcon was just called")
	}
	callInfo := struct {
		Agent Agent
	}{
		Agent: agent,
	}
	mock.lockDisplayTrayIcon.Lock()
	mock.calls.DisplayTrayIcon = append(mock.calls.DisplayTrayIcon, callInfo)
	mock.lockDisplayTrayIcon.Unlock()
	mock.DisplayTrayIconFunc(agent)
}

// DisplayTrayIconCalls gets all the calls that were made to DisplayTrayIcon.
// Check the length with:
//
//	len(mockedAgentUI.DisplayTrayIconCalls())
func (mock *AgentUIMock) DisplayTrayIconCalls() []struct {
	Agent Agent
} {
	var calls []struct {
		Agent Agent
	}
	mock.lockDisplayTrayIcon.RLock()
	calls = mock.calls.DisplayTrayIcon
	mock.lockDisplayTrayIcon.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *AgentUIMock) Run() {
	if mock.RunFunc == nil {
		panic("AgentUIMock.RunFunc: method is nil but AgentUI.Run was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc()
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedAgentUI.RunCalls())
func (mock *AgentUIMock) RunCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
