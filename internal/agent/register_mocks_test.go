// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package agent

import (
	"github.com/joshuar/go-hass-agent/internal/preferences"
	"sync"
)

// Ensure, that registrationPrefsMock does implement registrationPrefs.
// If this is not the case, regenerate this file with moq.
var _ registrationPrefs = &registrationPrefsMock{}

// registrationPrefsMock is a mock implementation of registrationPrefs.
//
//	func TestSomethingThatUsesregistrationPrefs(t *testing.T) {
//
//		// make and configure a mocked registrationPrefs
//		mockedregistrationPrefs := &registrationPrefsMock{
//			AgentRegisteredFunc: func() bool {
//				panic("mock out the AgentRegistered method")
//			},
//			SaveHassPreferencesFunc: func(details *preferences.Hass, options *preferences.Registration) error {
//				panic("mock out the SaveHassPreferences method")
//			},
//		}
//
//		// use mockedregistrationPrefs in code that requires registrationPrefs
//		// and then make assertions.
//
//	}
type registrationPrefsMock struct {
	// AgentRegisteredFunc mocks the AgentRegistered method.
	AgentRegisteredFunc func() bool

	// SaveHassPreferencesFunc mocks the SaveHassPreferences method.
	SaveHassPreferencesFunc func(details *preferences.Hass, options *preferences.Registration) error

	// calls tracks calls to the methods.
	calls struct {
		// AgentRegistered holds details about calls to the AgentRegistered method.
		AgentRegistered []struct {
		}
		// SaveHassPreferences holds details about calls to the SaveHassPreferences method.
		SaveHassPreferences []struct {
			// Details is the details argument value.
			Details *preferences.Hass
			// Options is the options argument value.
			Options *preferences.Registration
		}
	}
	lockAgentRegistered     sync.RWMutex
	lockSaveHassPreferences sync.RWMutex
}

// AgentRegistered calls AgentRegisteredFunc.
func (mock *registrationPrefsMock) AgentRegistered() bool {
	if mock.AgentRegisteredFunc == nil {
		panic("registrationPrefsMock.AgentRegisteredFunc: method is nil but registrationPrefs.AgentRegistered was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAgentRegistered.Lock()
	mock.calls.AgentRegistered = append(mock.calls.AgentRegistered, callInfo)
	mock.lockAgentRegistered.Unlock()
	return mock.AgentRegisteredFunc()
}

// AgentRegisteredCalls gets all the calls that were made to AgentRegistered.
// Check the length with:
//
//	len(mockedregistrationPrefs.AgentRegisteredCalls())
func (mock *registrationPrefsMock) AgentRegisteredCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAgentRegistered.RLock()
	calls = mock.calls.AgentRegistered
	mock.lockAgentRegistered.RUnlock()
	return calls
}

// SaveHassPreferences calls SaveHassPreferencesFunc.
func (mock *registrationPrefsMock) SaveHassPreferences(details *preferences.Hass, options *preferences.Registration) error {
	if mock.SaveHassPreferencesFunc == nil {
		panic("registrationPrefsMock.SaveHassPreferencesFunc: method is nil but registrationPrefs.SaveHassPreferences was just called")
	}
	callInfo := struct {
		Details *preferences.Hass
		Options *preferences.Registration
	}{
		Details: details,
		Options: options,
	}
	mock.lockSaveHassPreferences.Lock()
	mock.calls.SaveHassPreferences = append(mock.calls.SaveHassPreferences, callInfo)
	mock.lockSaveHassPreferences.Unlock()
	return mock.SaveHassPreferencesFunc(details, options)
}

// SaveHassPreferencesCalls gets all the calls that were made to SaveHassPreferences.
// Check the length with:
//
//	len(mockedregistrationPrefs.SaveHassPreferencesCalls())
func (mock *registrationPrefsMock) SaveHassPreferencesCalls() []struct {
	Details *preferences.Hass
	Options *preferences.Registration
} {
	var calls []struct {
		Details *preferences.Hass
		Options *preferences.Registration
	}
	mock.lockSaveHassPreferences.RLock()
	calls = mock.calls.SaveHassPreferences
	mock.lockSaveHassPreferences.RUnlock()
	return calls
}
