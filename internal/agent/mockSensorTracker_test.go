// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package agent

import (
	"context"
	"github.com/joshuar/go-hass-agent/internal/tracker"
	"sync"
)

// Ensure, that SensorTrackerMock does implement SensorTracker.
// If this is not the case, regenerate this file with moq.
var _ SensorTracker = &SensorTrackerMock{}

// SensorTrackerMock is a mock implementation of SensorTracker.
//
//	func TestSomethingThatUsesSensorTracker(t *testing.T) {
//
//		// make and configure a mocked SensorTracker
//		mockedSensorTracker := &SensorTrackerMock{
//			GetFunc: func(key string) (tracker.Sensor, error) {
//				panic("mock out the Get method")
//			},
//			ResetFunc: func()  {
//				panic("mock out the Reset method")
//			},
//			SensorListFunc: func() []string {
//				panic("mock out the SensorList method")
//			},
//			UpdateSensorsFunc: func(ctx context.Context, sensor any)  {
//				panic("mock out the UpdateSensors method")
//			},
//		}
//
//		// use mockedSensorTracker in code that requires SensorTracker
//		// and then make assertions.
//
//	}
type SensorTrackerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) (tracker.Sensor, error)

	// ResetFunc mocks the Reset method.
	ResetFunc func()

	// SensorListFunc mocks the SensorList method.
	SensorListFunc func() []string

	// UpdateSensorsFunc mocks the UpdateSensors method.
	UpdateSensorsFunc func(ctx context.Context, sensor any)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
		}
		// SensorList holds details about calls to the SensorList method.
		SensorList []struct {
		}
		// UpdateSensors holds details about calls to the UpdateSensors method.
		UpdateSensors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sensor is the sensor argument value.
			Sensor any
		}
	}
	lockGet           sync.RWMutex
	lockReset         sync.RWMutex
	lockSensorList    sync.RWMutex
	lockUpdateSensors sync.RWMutex
}

// Get calls GetFunc.
func (mock *SensorTrackerMock) Get(key string) (tracker.Sensor, error) {
	if mock.GetFunc == nil {
		panic("SensorTrackerMock.GetFunc: method is nil but SensorTracker.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSensorTracker.GetCalls())
func (mock *SensorTrackerMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *SensorTrackerMock) Reset() {
	if mock.ResetFunc == nil {
		panic("SensorTrackerMock.ResetFunc: method is nil but SensorTracker.Reset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc()
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedSensorTracker.ResetCalls())
func (mock *SensorTrackerMock) ResetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// SensorList calls SensorListFunc.
func (mock *SensorTrackerMock) SensorList() []string {
	if mock.SensorListFunc == nil {
		panic("SensorTrackerMock.SensorListFunc: method is nil but SensorTracker.SensorList was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSensorList.Lock()
	mock.calls.SensorList = append(mock.calls.SensorList, callInfo)
	mock.lockSensorList.Unlock()
	return mock.SensorListFunc()
}

// SensorListCalls gets all the calls that were made to SensorList.
// Check the length with:
//
//	len(mockedSensorTracker.SensorListCalls())
func (mock *SensorTrackerMock) SensorListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSensorList.RLock()
	calls = mock.calls.SensorList
	mock.lockSensorList.RUnlock()
	return calls
}

// UpdateSensors calls UpdateSensorsFunc.
func (mock *SensorTrackerMock) UpdateSensors(ctx context.Context, sensor any) {
	if mock.UpdateSensorsFunc == nil {
		panic("SensorTrackerMock.UpdateSensorsFunc: method is nil but SensorTracker.UpdateSensors was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sensor any
	}{
		Ctx:    ctx,
		Sensor: sensor,
	}
	mock.lockUpdateSensors.Lock()
	mock.calls.UpdateSensors = append(mock.calls.UpdateSensors, callInfo)
	mock.lockUpdateSensors.Unlock()
	mock.UpdateSensorsFunc(ctx, sensor)
}

// UpdateSensorsCalls gets all the calls that were made to UpdateSensors.
// Check the length with:
//
//	len(mockedSensorTracker.UpdateSensorsCalls())
func (mock *SensorTrackerMock) UpdateSensorsCalls() []struct {
	Ctx    context.Context
	Sensor any
} {
	var calls []struct {
		Ctx    context.Context
		Sensor any
	}
	mock.lockUpdateSensors.RLock()
	calls = mock.calls.UpdateSensors
	mock.lockUpdateSensors.RUnlock()
	return calls
}
