// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package agent

import (
	"context"
	"github.com/joshuar/go-hass-agent/internal/agent/ui"
	"github.com/joshuar/go-hass-agent/internal/hass/sensor"
	"github.com/joshuar/go-hass-agent/internal/preferences"
	"sync"
)

// Ensure, that UIMock does implement UI.
// If this is not the case, regenerate this file with moq.
var _ UI = &UIMock{}

// UIMock is a mock implementation of UI.
//
//	func TestSomethingThatUsesUI(t *testing.T) {
//
//		// make and configure a mocked UI
//		mockedUI := &UIMock{
//			DisplayNotificationFunc: func(n ui.Notification)  {
//				panic("mock out the DisplayNotification method")
//			},
//			DisplayRegistrationWindowFunc: func(ctx context.Context, prefs *preferences.Preferences, doneCh chan struct{})  {
//				panic("mock out the DisplayRegistrationWindow method")
//			},
//			DisplayTrayIconFunc: func(ctx context.Context, agent ui.Agent, trk ui.SensorTracker)  {
//				panic("mock out the DisplayTrayIcon method")
//			},
//			RunFunc: func(ctx context.Context, agent ui.Agent, doneCh chan struct{})  {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedUI in code that requires UI
//		// and then make assertions.
//
//	}
type UIMock struct {
	// DisplayNotificationFunc mocks the DisplayNotification method.
	DisplayNotificationFunc func(n ui.Notification)

	// DisplayRegistrationWindowFunc mocks the DisplayRegistrationWindow method.
	DisplayRegistrationWindowFunc func(ctx context.Context, prefs *preferences.Preferences, doneCh chan struct{})

	// DisplayTrayIconFunc mocks the DisplayTrayIcon method.
	DisplayTrayIconFunc func(ctx context.Context, agent ui.Agent, trk ui.SensorTracker)

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, agent ui.Agent, doneCh chan struct{})

	// calls tracks calls to the methods.
	calls struct {
		// DisplayNotification holds details about calls to the DisplayNotification method.
		DisplayNotification []struct {
			// N is the n argument value.
			N ui.Notification
		}
		// DisplayRegistrationWindow holds details about calls to the DisplayRegistrationWindow method.
		DisplayRegistrationWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prefs is the prefs argument value.
			Prefs *preferences.Preferences
			// DoneCh is the doneCh argument value.
			DoneCh chan struct{}
		}
		// DisplayTrayIcon holds details about calls to the DisplayTrayIcon method.
		DisplayTrayIcon []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Agent is the agent argument value.
			Agent ui.Agent
			// Trk is the trk argument value.
			Trk ui.SensorTracker
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Agent is the agent argument value.
			Agent ui.Agent
			// DoneCh is the doneCh argument value.
			DoneCh chan struct{}
		}
	}
	lockDisplayNotification       sync.RWMutex
	lockDisplayRegistrationWindow sync.RWMutex
	lockDisplayTrayIcon           sync.RWMutex
	lockRun                       sync.RWMutex
}

// DisplayNotification calls DisplayNotificationFunc.
func (mock *UIMock) DisplayNotification(n ui.Notification) {
	if mock.DisplayNotificationFunc == nil {
		panic("UIMock.DisplayNotificationFunc: method is nil but UI.DisplayNotification was just called")
	}
	callInfo := struct {
		N ui.Notification
	}{
		N: n,
	}
	mock.lockDisplayNotification.Lock()
	mock.calls.DisplayNotification = append(mock.calls.DisplayNotification, callInfo)
	mock.lockDisplayNotification.Unlock()
	mock.DisplayNotificationFunc(n)
}

// DisplayNotificationCalls gets all the calls that were made to DisplayNotification.
// Check the length with:
//
//	len(mockedUI.DisplayNotificationCalls())
func (mock *UIMock) DisplayNotificationCalls() []struct {
	N ui.Notification
} {
	var calls []struct {
		N ui.Notification
	}
	mock.lockDisplayNotification.RLock()
	calls = mock.calls.DisplayNotification
	mock.lockDisplayNotification.RUnlock()
	return calls
}

// DisplayRegistrationWindow calls DisplayRegistrationWindowFunc.
func (mock *UIMock) DisplayRegistrationWindow(ctx context.Context, prefs *preferences.Preferences, doneCh chan struct{}) {
	if mock.DisplayRegistrationWindowFunc == nil {
		panic("UIMock.DisplayRegistrationWindowFunc: method is nil but UI.DisplayRegistrationWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Prefs  *preferences.Preferences
		DoneCh chan struct{}
	}{
		Ctx:    ctx,
		Prefs:  prefs,
		DoneCh: doneCh,
	}
	mock.lockDisplayRegistrationWindow.Lock()
	mock.calls.DisplayRegistrationWindow = append(mock.calls.DisplayRegistrationWindow, callInfo)
	mock.lockDisplayRegistrationWindow.Unlock()
	mock.DisplayRegistrationWindowFunc(ctx, prefs, doneCh)
}

// DisplayRegistrationWindowCalls gets all the calls that were made to DisplayRegistrationWindow.
// Check the length with:
//
//	len(mockedUI.DisplayRegistrationWindowCalls())
func (mock *UIMock) DisplayRegistrationWindowCalls() []struct {
	Ctx    context.Context
	Prefs  *preferences.Preferences
	DoneCh chan struct{}
} {
	var calls []struct {
		Ctx    context.Context
		Prefs  *preferences.Preferences
		DoneCh chan struct{}
	}
	mock.lockDisplayRegistrationWindow.RLock()
	calls = mock.calls.DisplayRegistrationWindow
	mock.lockDisplayRegistrationWindow.RUnlock()
	return calls
}

// DisplayTrayIcon calls DisplayTrayIconFunc.
func (mock *UIMock) DisplayTrayIcon(ctx context.Context, agent ui.Agent, trk ui.SensorTracker) {
	if mock.DisplayTrayIconFunc == nil {
		panic("UIMock.DisplayTrayIconFunc: method is nil but UI.DisplayTrayIcon was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Agent ui.Agent
		Trk   ui.SensorTracker
	}{
		Ctx:   ctx,
		Agent: agent,
		Trk:   trk,
	}
	mock.lockDisplayTrayIcon.Lock()
	mock.calls.DisplayTrayIcon = append(mock.calls.DisplayTrayIcon, callInfo)
	mock.lockDisplayTrayIcon.Unlock()
	mock.DisplayTrayIconFunc(ctx, agent, trk)
}

// DisplayTrayIconCalls gets all the calls that were made to DisplayTrayIcon.
// Check the length with:
//
//	len(mockedUI.DisplayTrayIconCalls())
func (mock *UIMock) DisplayTrayIconCalls() []struct {
	Ctx   context.Context
	Agent ui.Agent
	Trk   ui.SensorTracker
} {
	var calls []struct {
		Ctx   context.Context
		Agent ui.Agent
		Trk   ui.SensorTracker
	}
	mock.lockDisplayTrayIcon.RLock()
	calls = mock.calls.DisplayTrayIcon
	mock.lockDisplayTrayIcon.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *UIMock) Run(ctx context.Context, agent ui.Agent, doneCh chan struct{}) {
	if mock.RunFunc == nil {
		panic("UIMock.RunFunc: method is nil but UI.Run was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Agent  ui.Agent
		DoneCh chan struct{}
	}{
		Ctx:    ctx,
		Agent:  agent,
		DoneCh: doneCh,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(ctx, agent, doneCh)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedUI.RunCalls())
func (mock *UIMock) RunCalls() []struct {
	Ctx    context.Context
	Agent  ui.Agent
	DoneCh chan struct{}
} {
	var calls []struct {
		Ctx    context.Context
		Agent  ui.Agent
		DoneCh chan struct{}
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Ensure, that RegistryMock does implement Registry.
// If this is not the case, regenerate this file with moq.
var _ Registry = &RegistryMock{}

// RegistryMock is a mock implementation of Registry.
//
//	func TestSomethingThatUsesRegistry(t *testing.T) {
//
//		// make and configure a mocked Registry
//		mockedRegistry := &RegistryMock{
//			IsDisabledFunc: func(id string) bool {
//				panic("mock out the IsDisabled method")
//			},
//			IsRegisteredFunc: func(id string) bool {
//				panic("mock out the IsRegistered method")
//			},
//			SetDisabledFunc: func(id string, state bool) error {
//				panic("mock out the SetDisabled method")
//			},
//			SetRegisteredFunc: func(id string, state bool) error {
//				panic("mock out the SetRegistered method")
//			},
//		}
//
//		// use mockedRegistry in code that requires Registry
//		// and then make assertions.
//
//	}
type RegistryMock struct {
	// IsDisabledFunc mocks the IsDisabled method.
	IsDisabledFunc func(id string) bool

	// IsRegisteredFunc mocks the IsRegistered method.
	IsRegisteredFunc func(id string) bool

	// SetDisabledFunc mocks the SetDisabled method.
	SetDisabledFunc func(id string, state bool) error

	// SetRegisteredFunc mocks the SetRegistered method.
	SetRegisteredFunc func(id string, state bool) error

	// calls tracks calls to the methods.
	calls struct {
		// IsDisabled holds details about calls to the IsDisabled method.
		IsDisabled []struct {
			// ID is the id argument value.
			ID string
		}
		// IsRegistered holds details about calls to the IsRegistered method.
		IsRegistered []struct {
			// ID is the id argument value.
			ID string
		}
		// SetDisabled holds details about calls to the SetDisabled method.
		SetDisabled []struct {
			// ID is the id argument value.
			ID string
			// State is the state argument value.
			State bool
		}
		// SetRegistered holds details about calls to the SetRegistered method.
		SetRegistered []struct {
			// ID is the id argument value.
			ID string
			// State is the state argument value.
			State bool
		}
	}
	lockIsDisabled    sync.RWMutex
	lockIsRegistered  sync.RWMutex
	lockSetDisabled   sync.RWMutex
	lockSetRegistered sync.RWMutex
}

// IsDisabled calls IsDisabledFunc.
func (mock *RegistryMock) IsDisabled(id string) bool {
	if mock.IsDisabledFunc == nil {
		panic("RegistryMock.IsDisabledFunc: method is nil but Registry.IsDisabled was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockIsDisabled.Lock()
	mock.calls.IsDisabled = append(mock.calls.IsDisabled, callInfo)
	mock.lockIsDisabled.Unlock()
	return mock.IsDisabledFunc(id)
}

// IsDisabledCalls gets all the calls that were made to IsDisabled.
// Check the length with:
//
//	len(mockedRegistry.IsDisabledCalls())
func (mock *RegistryMock) IsDisabledCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockIsDisabled.RLock()
	calls = mock.calls.IsDisabled
	mock.lockIsDisabled.RUnlock()
	return calls
}

// IsRegistered calls IsRegisteredFunc.
func (mock *RegistryMock) IsRegistered(id string) bool {
	if mock.IsRegisteredFunc == nil {
		panic("RegistryMock.IsRegisteredFunc: method is nil but Registry.IsRegistered was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockIsRegistered.Lock()
	mock.calls.IsRegistered = append(mock.calls.IsRegistered, callInfo)
	mock.lockIsRegistered.Unlock()
	return mock.IsRegisteredFunc(id)
}

// IsRegisteredCalls gets all the calls that were made to IsRegistered.
// Check the length with:
//
//	len(mockedRegistry.IsRegisteredCalls())
func (mock *RegistryMock) IsRegisteredCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockIsRegistered.RLock()
	calls = mock.calls.IsRegistered
	mock.lockIsRegistered.RUnlock()
	return calls
}

// SetDisabled calls SetDisabledFunc.
func (mock *RegistryMock) SetDisabled(id string, state bool) error {
	if mock.SetDisabledFunc == nil {
		panic("RegistryMock.SetDisabledFunc: method is nil but Registry.SetDisabled was just called")
	}
	callInfo := struct {
		ID    string
		State bool
	}{
		ID:    id,
		State: state,
	}
	mock.lockSetDisabled.Lock()
	mock.calls.SetDisabled = append(mock.calls.SetDisabled, callInfo)
	mock.lockSetDisabled.Unlock()
	return mock.SetDisabledFunc(id, state)
}

// SetDisabledCalls gets all the calls that were made to SetDisabled.
// Check the length with:
//
//	len(mockedRegistry.SetDisabledCalls())
func (mock *RegistryMock) SetDisabledCalls() []struct {
	ID    string
	State bool
} {
	var calls []struct {
		ID    string
		State bool
	}
	mock.lockSetDisabled.RLock()
	calls = mock.calls.SetDisabled
	mock.lockSetDisabled.RUnlock()
	return calls
}

// SetRegistered calls SetRegisteredFunc.
func (mock *RegistryMock) SetRegistered(id string, state bool) error {
	if mock.SetRegisteredFunc == nil {
		panic("RegistryMock.SetRegisteredFunc: method is nil but Registry.SetRegistered was just called")
	}
	callInfo := struct {
		ID    string
		State bool
	}{
		ID:    id,
		State: state,
	}
	mock.lockSetRegistered.Lock()
	mock.calls.SetRegistered = append(mock.calls.SetRegistered, callInfo)
	mock.lockSetRegistered.Unlock()
	return mock.SetRegisteredFunc(id, state)
}

// SetRegisteredCalls gets all the calls that were made to SetRegistered.
// Check the length with:
//
//	len(mockedRegistry.SetRegisteredCalls())
func (mock *RegistryMock) SetRegisteredCalls() []struct {
	ID    string
	State bool
} {
	var calls []struct {
		ID    string
		State bool
	}
	mock.lockSetRegistered.RLock()
	calls = mock.calls.SetRegistered
	mock.lockSetRegistered.RUnlock()
	return calls
}

// Ensure, that SensorTrackerMock does implement SensorTracker.
// If this is not the case, regenerate this file with moq.
var _ SensorTracker = &SensorTrackerMock{}

// SensorTrackerMock is a mock implementation of SensorTracker.
//
//	func TestSomethingThatUsesSensorTracker(t *testing.T) {
//
//		// make and configure a mocked SensorTracker
//		mockedSensorTracker := &SensorTrackerMock{
//			AddFunc: func(details sensor.Details) error {
//				panic("mock out the Add method")
//			},
//			GetFunc: func(key string) (sensor.Details, error) {
//				panic("mock out the Get method")
//			},
//			ResetFunc: func()  {
//				panic("mock out the Reset method")
//			},
//			SensorListFunc: func() []string {
//				panic("mock out the SensorList method")
//			},
//		}
//
//		// use mockedSensorTracker in code that requires SensorTracker
//		// and then make assertions.
//
//	}
type SensorTrackerMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(details sensor.Details) error

	// GetFunc mocks the Get method.
	GetFunc func(key string) (sensor.Details, error)

	// ResetFunc mocks the Reset method.
	ResetFunc func()

	// SensorListFunc mocks the SensorList method.
	SensorListFunc func() []string

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Details is the details argument value.
			Details sensor.Details
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
		}
		// SensorList holds details about calls to the SensorList method.
		SensorList []struct {
		}
	}
	lockAdd        sync.RWMutex
	lockGet        sync.RWMutex
	lockReset      sync.RWMutex
	lockSensorList sync.RWMutex
}

// Add calls AddFunc.
func (mock *SensorTrackerMock) Add(details sensor.Details) error {
	if mock.AddFunc == nil {
		panic("SensorTrackerMock.AddFunc: method is nil but SensorTracker.Add was just called")
	}
	callInfo := struct {
		Details sensor.Details
	}{
		Details: details,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(details)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedSensorTracker.AddCalls())
func (mock *SensorTrackerMock) AddCalls() []struct {
	Details sensor.Details
} {
	var calls []struct {
		Details sensor.Details
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SensorTrackerMock) Get(key string) (sensor.Details, error) {
	if mock.GetFunc == nil {
		panic("SensorTrackerMock.GetFunc: method is nil but SensorTracker.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSensorTracker.GetCalls())
func (mock *SensorTrackerMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *SensorTrackerMock) Reset() {
	if mock.ResetFunc == nil {
		panic("SensorTrackerMock.ResetFunc: method is nil but SensorTracker.Reset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc()
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedSensorTracker.ResetCalls())
func (mock *SensorTrackerMock) ResetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// SensorList calls SensorListFunc.
func (mock *SensorTrackerMock) SensorList() []string {
	if mock.SensorListFunc == nil {
		panic("SensorTrackerMock.SensorListFunc: method is nil but SensorTracker.SensorList was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSensorList.Lock()
	mock.calls.SensorList = append(mock.calls.SensorList, callInfo)
	mock.lockSensorList.Unlock()
	return mock.SensorListFunc()
}

// SensorListCalls gets all the calls that were made to SensorList.
// Check the length with:
//
//	len(mockedSensorTracker.SensorListCalls())
func (mock *SensorTrackerMock) SensorListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSensorList.RLock()
	calls = mock.calls.SensorList
	mock.lockSensorList.RUnlock()
	return calls
}
