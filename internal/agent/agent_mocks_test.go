// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package agent

import (
	"context"
	fyneui "github.com/joshuar/go-hass-agent/internal/agent/ui/fyneUI"
	"github.com/joshuar/go-hass-agent/internal/hass/sensor"
	"github.com/joshuar/go-hass-agent/internal/preferences"
	mqtthass "github.com/joshuar/go-hass-anything/v11/pkg/hass"
	mqttapi "github.com/joshuar/go-hass-anything/v11/pkg/mqtt"
	"sync"
)

// Ensure, that uiMock does implement ui.
// If this is not the case, regenerate this file with moq.
var _ ui = &uiMock{}

// uiMock is a mock implementation of ui.
//
//	func TestSomethingThatUsesui(t *testing.T) {
//
//		// make and configure a mocked ui
//		mockedui := &uiMock{
//			DisplayNotificationFunc: func(n fyneui.Notification)  {
//				panic("mock out the DisplayNotification method")
//			},
//			DisplayRegistrationWindowFunc: func(ctx context.Context, prefs *preferences.Registration) chan bool {
//				panic("mock out the DisplayRegistrationWindow method")
//			},
//			DisplayTrayIconFunc: func(ctx context.Context, cancelFunc context.CancelFunc)  {
//				panic("mock out the DisplayTrayIcon method")
//			},
//			RunFunc: func(ctx context.Context)  {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedui in code that requires ui
//		// and then make assertions.
//
//	}
type uiMock struct {
	// DisplayNotificationFunc mocks the DisplayNotification method.
	DisplayNotificationFunc func(n fyneui.Notification)

	// DisplayRegistrationWindowFunc mocks the DisplayRegistrationWindow method.
	DisplayRegistrationWindowFunc func(ctx context.Context, prefs *preferences.Registration) chan bool

	// DisplayTrayIconFunc mocks the DisplayTrayIcon method.
	DisplayTrayIconFunc func(ctx context.Context, cancelFunc context.CancelFunc)

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// DisplayNotification holds details about calls to the DisplayNotification method.
		DisplayNotification []struct {
			// N is the n argument value.
			N fyneui.Notification
		}
		// DisplayRegistrationWindow holds details about calls to the DisplayRegistrationWindow method.
		DisplayRegistrationWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prefs is the prefs argument value.
			Prefs *preferences.Registration
		}
		// DisplayTrayIcon holds details about calls to the DisplayTrayIcon method.
		DisplayTrayIcon []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CancelFunc is the cancelFunc argument value.
			CancelFunc context.CancelFunc
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockDisplayNotification       sync.RWMutex
	lockDisplayRegistrationWindow sync.RWMutex
	lockDisplayTrayIcon           sync.RWMutex
	lockRun                       sync.RWMutex
}

// DisplayNotification calls DisplayNotificationFunc.
func (mock *uiMock) DisplayNotification(n fyneui.Notification) {
	if mock.DisplayNotificationFunc == nil {
		panic("uiMock.DisplayNotificationFunc: method is nil but ui.DisplayNotification was just called")
	}
	callInfo := struct {
		N fyneui.Notification
	}{
		N: n,
	}
	mock.lockDisplayNotification.Lock()
	mock.calls.DisplayNotification = append(mock.calls.DisplayNotification, callInfo)
	mock.lockDisplayNotification.Unlock()
	mock.DisplayNotificationFunc(n)
}

// DisplayNotificationCalls gets all the calls that were made to DisplayNotification.
// Check the length with:
//
//	len(mockedui.DisplayNotificationCalls())
func (mock *uiMock) DisplayNotificationCalls() []struct {
	N fyneui.Notification
} {
	var calls []struct {
		N fyneui.Notification
	}
	mock.lockDisplayNotification.RLock()
	calls = mock.calls.DisplayNotification
	mock.lockDisplayNotification.RUnlock()
	return calls
}

// DisplayRegistrationWindow calls DisplayRegistrationWindowFunc.
func (mock *uiMock) DisplayRegistrationWindow(ctx context.Context, prefs *preferences.Registration) chan bool {
	if mock.DisplayRegistrationWindowFunc == nil {
		panic("uiMock.DisplayRegistrationWindowFunc: method is nil but ui.DisplayRegistrationWindow was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Prefs *preferences.Registration
	}{
		Ctx:   ctx,
		Prefs: prefs,
	}
	mock.lockDisplayRegistrationWindow.Lock()
	mock.calls.DisplayRegistrationWindow = append(mock.calls.DisplayRegistrationWindow, callInfo)
	mock.lockDisplayRegistrationWindow.Unlock()
	return mock.DisplayRegistrationWindowFunc(ctx, prefs)
}

// DisplayRegistrationWindowCalls gets all the calls that were made to DisplayRegistrationWindow.
// Check the length with:
//
//	len(mockedui.DisplayRegistrationWindowCalls())
func (mock *uiMock) DisplayRegistrationWindowCalls() []struct {
	Ctx   context.Context
	Prefs *preferences.Registration
} {
	var calls []struct {
		Ctx   context.Context
		Prefs *preferences.Registration
	}
	mock.lockDisplayRegistrationWindow.RLock()
	calls = mock.calls.DisplayRegistrationWindow
	mock.lockDisplayRegistrationWindow.RUnlock()
	return calls
}

// DisplayTrayIcon calls DisplayTrayIconFunc.
func (mock *uiMock) DisplayTrayIcon(ctx context.Context, cancelFunc context.CancelFunc) {
	if mock.DisplayTrayIconFunc == nil {
		panic("uiMock.DisplayTrayIconFunc: method is nil but ui.DisplayTrayIcon was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		CancelFunc context.CancelFunc
	}{
		Ctx:        ctx,
		CancelFunc: cancelFunc,
	}
	mock.lockDisplayTrayIcon.Lock()
	mock.calls.DisplayTrayIcon = append(mock.calls.DisplayTrayIcon, callInfo)
	mock.lockDisplayTrayIcon.Unlock()
	mock.DisplayTrayIconFunc(ctx, cancelFunc)
}

// DisplayTrayIconCalls gets all the calls that were made to DisplayTrayIcon.
// Check the length with:
//
//	len(mockedui.DisplayTrayIconCalls())
func (mock *uiMock) DisplayTrayIconCalls() []struct {
	Ctx        context.Context
	CancelFunc context.CancelFunc
} {
	var calls []struct {
		Ctx        context.Context
		CancelFunc context.CancelFunc
	}
	mock.lockDisplayTrayIcon.RLock()
	calls = mock.calls.DisplayTrayIcon
	mock.lockDisplayTrayIcon.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *uiMock) Run(ctx context.Context) {
	if mock.RunFunc == nil {
		panic("uiMock.RunFunc: method is nil but ui.Run was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(ctx)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedui.RunCalls())
func (mock *uiMock) RunCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Ensure, that agentPreferencesMock does implement agentPreferences.
// If this is not the case, regenerate this file with moq.
var _ agentPreferences = &agentPreferencesMock{}

// agentPreferencesMock is a mock implementation of agentPreferences.
//
//	func TestSomethingThatUsesagentPreferences(t *testing.T) {
//
//		// make and configure a mocked agentPreferences
//		mockedagentPreferences := &agentPreferencesMock{
//			AgentRegisteredFunc: func() bool {
//				panic("mock out the AgentRegistered method")
//			},
//			AgentVersionFunc: func() string {
//				panic("mock out the AgentVersion method")
//			},
//			GenerateMQTTDeviceFunc: func(ctx context.Context) *mqtthass.Device {
//				panic("mock out the GenerateMQTTDevice method")
//			},
//			GetDeviceInfoFunc: func() *preferences.Device {
//				panic("mock out the GetDeviceInfo method")
//			},
//			GetMQTTPreferencesFunc: func() mqttapi.Preferences {
//				panic("mock out the GetMQTTPreferences method")
//			},
//			IsMQTTEnabledFunc: func() bool {
//				panic("mock out the IsMQTTEnabled method")
//			},
//			SaveHassPreferencesFunc: func(details *preferences.Hass, options *preferences.Registration) error {
//				panic("mock out the SaveHassPreferences method")
//			},
//		}
//
//		// use mockedagentPreferences in code that requires agentPreferences
//		// and then make assertions.
//
//	}
type agentPreferencesMock struct {
	// AgentRegisteredFunc mocks the AgentRegistered method.
	AgentRegisteredFunc func() bool

	// AgentVersionFunc mocks the AgentVersion method.
	AgentVersionFunc func() string

	// GenerateMQTTDeviceFunc mocks the GenerateMQTTDevice method.
	GenerateMQTTDeviceFunc func(ctx context.Context) *mqtthass.Device

	// GetDeviceInfoFunc mocks the GetDeviceInfo method.
	GetDeviceInfoFunc func() *preferences.Device

	// GetMQTTPreferencesFunc mocks the GetMQTTPreferences method.
	GetMQTTPreferencesFunc func() mqttapi.Preferences

	// IsMQTTEnabledFunc mocks the IsMQTTEnabled method.
	IsMQTTEnabledFunc func() bool

	// SaveHassPreferencesFunc mocks the SaveHassPreferences method.
	SaveHassPreferencesFunc func(details *preferences.Hass, options *preferences.Registration) error

	// calls tracks calls to the methods.
	calls struct {
		// AgentRegistered holds details about calls to the AgentRegistered method.
		AgentRegistered []struct {
		}
		// AgentVersion holds details about calls to the AgentVersion method.
		AgentVersion []struct {
		}
		// GenerateMQTTDevice holds details about calls to the GenerateMQTTDevice method.
		GenerateMQTTDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetDeviceInfo holds details about calls to the GetDeviceInfo method.
		GetDeviceInfo []struct {
		}
		// GetMQTTPreferences holds details about calls to the GetMQTTPreferences method.
		GetMQTTPreferences []struct {
		}
		// IsMQTTEnabled holds details about calls to the IsMQTTEnabled method.
		IsMQTTEnabled []struct {
		}
		// SaveHassPreferences holds details about calls to the SaveHassPreferences method.
		SaveHassPreferences []struct {
			// Details is the details argument value.
			Details *preferences.Hass
			// Options is the options argument value.
			Options *preferences.Registration
		}
	}
	lockAgentRegistered     sync.RWMutex
	lockAgentVersion        sync.RWMutex
	lockGenerateMQTTDevice  sync.RWMutex
	lockGetDeviceInfo       sync.RWMutex
	lockGetMQTTPreferences  sync.RWMutex
	lockIsMQTTEnabled       sync.RWMutex
	lockSaveHassPreferences sync.RWMutex
}

// AgentRegistered calls AgentRegisteredFunc.
func (mock *agentPreferencesMock) AgentRegistered() bool {
	if mock.AgentRegisteredFunc == nil {
		panic("agentPreferencesMock.AgentRegisteredFunc: method is nil but agentPreferences.AgentRegistered was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAgentRegistered.Lock()
	mock.calls.AgentRegistered = append(mock.calls.AgentRegistered, callInfo)
	mock.lockAgentRegistered.Unlock()
	return mock.AgentRegisteredFunc()
}

// AgentRegisteredCalls gets all the calls that were made to AgentRegistered.
// Check the length with:
//
//	len(mockedagentPreferences.AgentRegisteredCalls())
func (mock *agentPreferencesMock) AgentRegisteredCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAgentRegistered.RLock()
	calls = mock.calls.AgentRegistered
	mock.lockAgentRegistered.RUnlock()
	return calls
}

// AgentVersion calls AgentVersionFunc.
func (mock *agentPreferencesMock) AgentVersion() string {
	if mock.AgentVersionFunc == nil {
		panic("agentPreferencesMock.AgentVersionFunc: method is nil but agentPreferences.AgentVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAgentVersion.Lock()
	mock.calls.AgentVersion = append(mock.calls.AgentVersion, callInfo)
	mock.lockAgentVersion.Unlock()
	return mock.AgentVersionFunc()
}

// AgentVersionCalls gets all the calls that were made to AgentVersion.
// Check the length with:
//
//	len(mockedagentPreferences.AgentVersionCalls())
func (mock *agentPreferencesMock) AgentVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAgentVersion.RLock()
	calls = mock.calls.AgentVersion
	mock.lockAgentVersion.RUnlock()
	return calls
}

// GenerateMQTTDevice calls GenerateMQTTDeviceFunc.
func (mock *agentPreferencesMock) GenerateMQTTDevice(ctx context.Context) *mqtthass.Device {
	if mock.GenerateMQTTDeviceFunc == nil {
		panic("agentPreferencesMock.GenerateMQTTDeviceFunc: method is nil but agentPreferences.GenerateMQTTDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGenerateMQTTDevice.Lock()
	mock.calls.GenerateMQTTDevice = append(mock.calls.GenerateMQTTDevice, callInfo)
	mock.lockGenerateMQTTDevice.Unlock()
	return mock.GenerateMQTTDeviceFunc(ctx)
}

// GenerateMQTTDeviceCalls gets all the calls that were made to GenerateMQTTDevice.
// Check the length with:
//
//	len(mockedagentPreferences.GenerateMQTTDeviceCalls())
func (mock *agentPreferencesMock) GenerateMQTTDeviceCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGenerateMQTTDevice.RLock()
	calls = mock.calls.GenerateMQTTDevice
	mock.lockGenerateMQTTDevice.RUnlock()
	return calls
}

// GetDeviceInfo calls GetDeviceInfoFunc.
func (mock *agentPreferencesMock) GetDeviceInfo() *preferences.Device {
	if mock.GetDeviceInfoFunc == nil {
		panic("agentPreferencesMock.GetDeviceInfoFunc: method is nil but agentPreferences.GetDeviceInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDeviceInfo.Lock()
	mock.calls.GetDeviceInfo = append(mock.calls.GetDeviceInfo, callInfo)
	mock.lockGetDeviceInfo.Unlock()
	return mock.GetDeviceInfoFunc()
}

// GetDeviceInfoCalls gets all the calls that were made to GetDeviceInfo.
// Check the length with:
//
//	len(mockedagentPreferences.GetDeviceInfoCalls())
func (mock *agentPreferencesMock) GetDeviceInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDeviceInfo.RLock()
	calls = mock.calls.GetDeviceInfo
	mock.lockGetDeviceInfo.RUnlock()
	return calls
}

// GetMQTTPreferences calls GetMQTTPreferencesFunc.
func (mock *agentPreferencesMock) GetMQTTPreferences() mqttapi.Preferences {
	if mock.GetMQTTPreferencesFunc == nil {
		panic("agentPreferencesMock.GetMQTTPreferencesFunc: method is nil but agentPreferences.GetMQTTPreferences was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMQTTPreferences.Lock()
	mock.calls.GetMQTTPreferences = append(mock.calls.GetMQTTPreferences, callInfo)
	mock.lockGetMQTTPreferences.Unlock()
	return mock.GetMQTTPreferencesFunc()
}

// GetMQTTPreferencesCalls gets all the calls that were made to GetMQTTPreferences.
// Check the length with:
//
//	len(mockedagentPreferences.GetMQTTPreferencesCalls())
func (mock *agentPreferencesMock) GetMQTTPreferencesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMQTTPreferences.RLock()
	calls = mock.calls.GetMQTTPreferences
	mock.lockGetMQTTPreferences.RUnlock()
	return calls
}

// IsMQTTEnabled calls IsMQTTEnabledFunc.
func (mock *agentPreferencesMock) IsMQTTEnabled() bool {
	if mock.IsMQTTEnabledFunc == nil {
		panic("agentPreferencesMock.IsMQTTEnabledFunc: method is nil but agentPreferences.IsMQTTEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsMQTTEnabled.Lock()
	mock.calls.IsMQTTEnabled = append(mock.calls.IsMQTTEnabled, callInfo)
	mock.lockIsMQTTEnabled.Unlock()
	return mock.IsMQTTEnabledFunc()
}

// IsMQTTEnabledCalls gets all the calls that were made to IsMQTTEnabled.
// Check the length with:
//
//	len(mockedagentPreferences.IsMQTTEnabledCalls())
func (mock *agentPreferencesMock) IsMQTTEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsMQTTEnabled.RLock()
	calls = mock.calls.IsMQTTEnabled
	mock.lockIsMQTTEnabled.RUnlock()
	return calls
}

// SaveHassPreferences calls SaveHassPreferencesFunc.
func (mock *agentPreferencesMock) SaveHassPreferences(details *preferences.Hass, options *preferences.Registration) error {
	if mock.SaveHassPreferencesFunc == nil {
		panic("agentPreferencesMock.SaveHassPreferencesFunc: method is nil but agentPreferences.SaveHassPreferences was just called")
	}
	callInfo := struct {
		Details *preferences.Hass
		Options *preferences.Registration
	}{
		Details: details,
		Options: options,
	}
	mock.lockSaveHassPreferences.Lock()
	mock.calls.SaveHassPreferences = append(mock.calls.SaveHassPreferences, callInfo)
	mock.lockSaveHassPreferences.Unlock()
	return mock.SaveHassPreferencesFunc(details, options)
}

// SaveHassPreferencesCalls gets all the calls that were made to SaveHassPreferences.
// Check the length with:
//
//	len(mockedagentPreferences.SaveHassPreferencesCalls())
func (mock *agentPreferencesMock) SaveHassPreferencesCalls() []struct {
	Details *preferences.Hass
	Options *preferences.Registration
} {
	var calls []struct {
		Details *preferences.Hass
		Options *preferences.Registration
	}
	mock.lockSaveHassPreferences.RLock()
	calls = mock.calls.SaveHassPreferences
	mock.lockSaveHassPreferences.RUnlock()
	return calls
}

// Ensure, that SensorControllerMock does implement SensorController.
// If this is not the case, regenerate this file with moq.
var _ SensorController = &SensorControllerMock{}

// SensorControllerMock is a mock implementation of SensorController.
//
//	func TestSomethingThatUsesSensorController(t *testing.T) {
//
//		// make and configure a mocked SensorController
//		mockedSensorController := &SensorControllerMock{
//			ActiveWorkersFunc: func() []string {
//				panic("mock out the ActiveWorkers method")
//			},
//			IDFunc: func() string {
//				panic("mock out the ID method")
//			},
//			InactiveWorkersFunc: func() []string {
//				panic("mock out the InactiveWorkers method")
//			},
//			StartFunc: func(ctx context.Context, name string) (<-chan sensor.Details, error) {
//				panic("mock out the Start method")
//			},
//			StatesFunc: func(ctx context.Context) []sensor.Details {
//				panic("mock out the States method")
//			},
//			StopFunc: func(name string) error {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedSensorController in code that requires SensorController
//		// and then make assertions.
//
//	}
type SensorControllerMock struct {
	// ActiveWorkersFunc mocks the ActiveWorkers method.
	ActiveWorkersFunc func() []string

	// IDFunc mocks the ID method.
	IDFunc func() string

	// InactiveWorkersFunc mocks the InactiveWorkers method.
	InactiveWorkersFunc func() []string

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, name string) (<-chan sensor.Details, error)

	// StatesFunc mocks the States method.
	StatesFunc func(ctx context.Context) []sensor.Details

	// StopFunc mocks the Stop method.
	StopFunc func(name string) error

	// calls tracks calls to the methods.
	calls struct {
		// ActiveWorkers holds details about calls to the ActiveWorkers method.
		ActiveWorkers []struct {
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// InactiveWorkers holds details about calls to the InactiveWorkers method.
		InactiveWorkers []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// States holds details about calls to the States method.
		States []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockActiveWorkers   sync.RWMutex
	lockID              sync.RWMutex
	lockInactiveWorkers sync.RWMutex
	lockStart           sync.RWMutex
	lockStates          sync.RWMutex
	lockStop            sync.RWMutex
}

// ActiveWorkers calls ActiveWorkersFunc.
func (mock *SensorControllerMock) ActiveWorkers() []string {
	if mock.ActiveWorkersFunc == nil {
		panic("SensorControllerMock.ActiveWorkersFunc: method is nil but SensorController.ActiveWorkers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockActiveWorkers.Lock()
	mock.calls.ActiveWorkers = append(mock.calls.ActiveWorkers, callInfo)
	mock.lockActiveWorkers.Unlock()
	return mock.ActiveWorkersFunc()
}

// ActiveWorkersCalls gets all the calls that were made to ActiveWorkers.
// Check the length with:
//
//	len(mockedSensorController.ActiveWorkersCalls())
func (mock *SensorControllerMock) ActiveWorkersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockActiveWorkers.RLock()
	calls = mock.calls.ActiveWorkers
	mock.lockActiveWorkers.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *SensorControllerMock) ID() string {
	if mock.IDFunc == nil {
		panic("SensorControllerMock.IDFunc: method is nil but SensorController.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedSensorController.IDCalls())
func (mock *SensorControllerMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// InactiveWorkers calls InactiveWorkersFunc.
func (mock *SensorControllerMock) InactiveWorkers() []string {
	if mock.InactiveWorkersFunc == nil {
		panic("SensorControllerMock.InactiveWorkersFunc: method is nil but SensorController.InactiveWorkers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInactiveWorkers.Lock()
	mock.calls.InactiveWorkers = append(mock.calls.InactiveWorkers, callInfo)
	mock.lockInactiveWorkers.Unlock()
	return mock.InactiveWorkersFunc()
}

// InactiveWorkersCalls gets all the calls that were made to InactiveWorkers.
// Check the length with:
//
//	len(mockedSensorController.InactiveWorkersCalls())
func (mock *SensorControllerMock) InactiveWorkersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInactiveWorkers.RLock()
	calls = mock.calls.InactiveWorkers
	mock.lockInactiveWorkers.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *SensorControllerMock) Start(ctx context.Context, name string) (<-chan sensor.Details, error) {
	if mock.StartFunc == nil {
		panic("SensorControllerMock.StartFunc: method is nil but SensorController.Start was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx, name)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedSensorController.StartCalls())
func (mock *SensorControllerMock) StartCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// States calls StatesFunc.
func (mock *SensorControllerMock) States(ctx context.Context) []sensor.Details {
	if mock.StatesFunc == nil {
		panic("SensorControllerMock.StatesFunc: method is nil but SensorController.States was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStates.Lock()
	mock.calls.States = append(mock.calls.States, callInfo)
	mock.lockStates.Unlock()
	return mock.StatesFunc(ctx)
}

// StatesCalls gets all the calls that were made to States.
// Check the length with:
//
//	len(mockedSensorController.StatesCalls())
func (mock *SensorControllerMock) StatesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStates.RLock()
	calls = mock.calls.States
	mock.lockStates.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *SensorControllerMock) Stop(name string) error {
	if mock.StopFunc == nil {
		panic("SensorControllerMock.StopFunc: method is nil but SensorController.Stop was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	return mock.StopFunc(name)
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedSensorController.StopCalls())
func (mock *SensorControllerMock) StopCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

// Ensure, that MQTTControllerMock does implement MQTTController.
// If this is not the case, regenerate this file with moq.
var _ MQTTController = &MQTTControllerMock{}

// MQTTControllerMock is a mock implementation of MQTTController.
//
//	func TestSomethingThatUsesMQTTController(t *testing.T) {
//
//		// make and configure a mocked MQTTController
//		mockedMQTTController := &MQTTControllerMock{
//			ConfigsFunc: func() []*mqttapi.Msg {
//				panic("mock out the Configs method")
//			},
//			MsgsFunc: func() chan *mqttapi.Msg {
//				panic("mock out the Msgs method")
//			},
//			SubscriptionsFunc: func() []*mqttapi.Subscription {
//				panic("mock out the Subscriptions method")
//			},
//		}
//
//		// use mockedMQTTController in code that requires MQTTController
//		// and then make assertions.
//
//	}
type MQTTControllerMock struct {
	// ConfigsFunc mocks the Configs method.
	ConfigsFunc func() []*mqttapi.Msg

	// MsgsFunc mocks the Msgs method.
	MsgsFunc func() chan *mqttapi.Msg

	// SubscriptionsFunc mocks the Subscriptions method.
	SubscriptionsFunc func() []*mqttapi.Subscription

	// calls tracks calls to the methods.
	calls struct {
		// Configs holds details about calls to the Configs method.
		Configs []struct {
		}
		// Msgs holds details about calls to the Msgs method.
		Msgs []struct {
		}
		// Subscriptions holds details about calls to the Subscriptions method.
		Subscriptions []struct {
		}
	}
	lockConfigs       sync.RWMutex
	lockMsgs          sync.RWMutex
	lockSubscriptions sync.RWMutex
}

// Configs calls ConfigsFunc.
func (mock *MQTTControllerMock) Configs() []*mqttapi.Msg {
	if mock.ConfigsFunc == nil {
		panic("MQTTControllerMock.ConfigsFunc: method is nil but MQTTController.Configs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfigs.Lock()
	mock.calls.Configs = append(mock.calls.Configs, callInfo)
	mock.lockConfigs.Unlock()
	return mock.ConfigsFunc()
}

// ConfigsCalls gets all the calls that were made to Configs.
// Check the length with:
//
//	len(mockedMQTTController.ConfigsCalls())
func (mock *MQTTControllerMock) ConfigsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfigs.RLock()
	calls = mock.calls.Configs
	mock.lockConfigs.RUnlock()
	return calls
}

// Msgs calls MsgsFunc.
func (mock *MQTTControllerMock) Msgs() chan *mqttapi.Msg {
	if mock.MsgsFunc == nil {
		panic("MQTTControllerMock.MsgsFunc: method is nil but MQTTController.Msgs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMsgs.Lock()
	mock.calls.Msgs = append(mock.calls.Msgs, callInfo)
	mock.lockMsgs.Unlock()
	return mock.MsgsFunc()
}

// MsgsCalls gets all the calls that were made to Msgs.
// Check the length with:
//
//	len(mockedMQTTController.MsgsCalls())
func (mock *MQTTControllerMock) MsgsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMsgs.RLock()
	calls = mock.calls.Msgs
	mock.lockMsgs.RUnlock()
	return calls
}

// Subscriptions calls SubscriptionsFunc.
func (mock *MQTTControllerMock) Subscriptions() []*mqttapi.Subscription {
	if mock.SubscriptionsFunc == nil {
		panic("MQTTControllerMock.SubscriptionsFunc: method is nil but MQTTController.Subscriptions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscriptions.Lock()
	mock.calls.Subscriptions = append(mock.calls.Subscriptions, callInfo)
	mock.lockSubscriptions.Unlock()
	return mock.SubscriptionsFunc()
}

// SubscriptionsCalls gets all the calls that were made to Subscriptions.
// Check the length with:
//
//	len(mockedMQTTController.SubscriptionsCalls())
func (mock *MQTTControllerMock) SubscriptionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscriptions.RLock()
	calls = mock.calls.Subscriptions
	mock.lockSubscriptions.RUnlock()
	return calls
}
