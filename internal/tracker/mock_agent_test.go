// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tracker

import (
	"sync"
)

// Ensure, that agentMock does implement agent.
// If this is not the case, regenerate this file with moq.
var _ agent = &agentMock{}

// agentMock is a mock implementation of agent.
//
//	func TestSomethingThatUsesagent(t *testing.T) {
//
//		// make and configure a mocked agent
//		mockedagent := &agentMock{
//			StoragePathFunc: func(s string) (string, error) {
//				panic("mock out the StoragePath method")
//			},
//		}
//
//		// use mockedagent in code that requires agent
//		// and then make assertions.
//
//	}
type agentMock struct {
	// StoragePathFunc mocks the StoragePath method.
	StoragePathFunc func(s string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// StoragePath holds details about calls to the StoragePath method.
		StoragePath []struct {
			// S is the s argument value.
			S string
		}
	}
	lockStoragePath sync.RWMutex
}

// StoragePath calls StoragePathFunc.
func (mock *agentMock) StoragePath(s string) (string, error) {
	if mock.StoragePathFunc == nil {
		panic("agentMock.StoragePathFunc: method is nil but agent.StoragePath was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockStoragePath.Lock()
	mock.calls.StoragePath = append(mock.calls.StoragePath, callInfo)
	mock.lockStoragePath.Unlock()
	return mock.StoragePathFunc(s)
}

// StoragePathCalls gets all the calls that were made to StoragePath.
// Check the length with:
//
//	len(mockedagent.StoragePathCalls())
func (mock *agentMock) StoragePathCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockStoragePath.RLock()
	calls = mock.calls.StoragePath
	mock.lockStoragePath.RUnlock()
	return calls
}
