// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tracker

import (
	"sync"
)

// Ensure, that agentMock does implement agent.
// If this is not the case, regenerate this file with moq.
var _ agent = &agentMock{}

// agentMock is a mock implementation of agent.
//
//	func TestSomethingThatUsesagent(t *testing.T) {
//
//		// make and configure a mocked agent
//		mockedagent := &agentMock{
//			GetConfigFunc: func(s string, ifaceVal interface{}) error {
//				panic("mock out the GetConfig method")
//			},
//			StoragePathFunc: func(s string) (string, error) {
//				panic("mock out the StoragePath method")
//			},
//		}
//
//		// use mockedagent in code that requires agent
//		// and then make assertions.
//
//	}
type agentMock struct {
	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func(s string, ifaceVal interface{}) error

	// StoragePathFunc mocks the StoragePath method.
	StoragePathFunc func(s string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
			// S is the s argument value.
			S string
			// IfaceVal is the ifaceVal argument value.
			IfaceVal interface{}
		}
		// StoragePath holds details about calls to the StoragePath method.
		StoragePath []struct {
			// S is the s argument value.
			S string
		}
	}
	lockGetConfig   sync.RWMutex
	lockStoragePath sync.RWMutex
}

// GetConfig calls GetConfigFunc.
func (mock *agentMock) GetConfig(s string, ifaceVal interface{}) error {
	if mock.GetConfigFunc == nil {
		panic("agentMock.GetConfigFunc: method is nil but agent.GetConfig was just called")
	}
	callInfo := struct {
		S        string
		IfaceVal interface{}
	}{
		S:        s,
		IfaceVal: ifaceVal,
	}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc(s, ifaceVal)
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedagent.GetConfigCalls())
func (mock *agentMock) GetConfigCalls() []struct {
	S        string
	IfaceVal interface{}
} {
	var calls []struct {
		S        string
		IfaceVal interface{}
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// StoragePath calls StoragePathFunc.
func (mock *agentMock) StoragePath(s string) (string, error) {
	if mock.StoragePathFunc == nil {
		panic("agentMock.StoragePathFunc: method is nil but agent.StoragePath was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockStoragePath.Lock()
	mock.calls.StoragePath = append(mock.calls.StoragePath, callInfo)
	mock.lockStoragePath.Unlock()
	return mock.StoragePathFunc(s)
}

// StoragePathCalls gets all the calls that were made to StoragePath.
// Check the length with:
//
//	len(mockedagent.StoragePathCalls())
func (mock *agentMock) StoragePathCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockStoragePath.RLock()
	calls = mock.calls.StoragePath
	mock.lockStoragePath.RUnlock()
	return calls
}
