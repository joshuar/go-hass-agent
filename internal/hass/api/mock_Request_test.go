// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"bytes"
	"encoding/json"
	"sync"
)

// Ensure, that RequestMock does implement Request.
// If this is not the case, regenerate this file with moq.
var _ Request = &RequestMock{}

// RequestMock is a mock implementation of Request.
//
//	func TestSomethingThatUsesRequest(t *testing.T) {
//
//		// make and configure a mocked Request
//		mockedRequest := &RequestMock{
//			RequestDataFunc: func() json.RawMessage {
//				panic("mock out the RequestData method")
//			},
//			RequestTypeFunc: func() RequestType {
//				panic("mock out the RequestType method")
//			},
//			ResponseHandlerFunc: func(buffer bytes.Buffer, responseCh chan Response)  {
//				panic("mock out the ResponseHandler method")
//			},
//		}
//
//		// use mockedRequest in code that requires Request
//		// and then make assertions.
//
//	}
type RequestMock struct {
	// RequestDataFunc mocks the RequestData method.
	RequestDataFunc func() json.RawMessage

	// RequestTypeFunc mocks the RequestType method.
	RequestTypeFunc func() RequestType

	// ResponseHandlerFunc mocks the ResponseHandler method.
	ResponseHandlerFunc func(buffer bytes.Buffer, responseCh chan Response)

	// calls tracks calls to the methods.
	calls struct {
		// RequestData holds details about calls to the RequestData method.
		RequestData []struct {
		}
		// RequestType holds details about calls to the RequestType method.
		RequestType []struct {
		}
		// ResponseHandler holds details about calls to the ResponseHandler method.
		ResponseHandler []struct {
			// Buffer is the buffer argument value.
			Buffer bytes.Buffer
			// ResponseCh is the responseCh argument value.
			ResponseCh chan Response
		}
	}
	lockRequestData     sync.RWMutex
	lockRequestType     sync.RWMutex
	lockResponseHandler sync.RWMutex
}

// RequestData calls RequestDataFunc.
func (mock *RequestMock) RequestData() json.RawMessage {
	if mock.RequestDataFunc == nil {
		panic("RequestMock.RequestDataFunc: method is nil but Request.RequestData was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRequestData.Lock()
	mock.calls.RequestData = append(mock.calls.RequestData, callInfo)
	mock.lockRequestData.Unlock()
	return mock.RequestDataFunc()
}

// RequestDataCalls gets all the calls that were made to RequestData.
// Check the length with:
//
//	len(mockedRequest.RequestDataCalls())
func (mock *RequestMock) RequestDataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRequestData.RLock()
	calls = mock.calls.RequestData
	mock.lockRequestData.RUnlock()
	return calls
}

// RequestType calls RequestTypeFunc.
func (mock *RequestMock) RequestType() RequestType {
	if mock.RequestTypeFunc == nil {
		panic("RequestMock.RequestTypeFunc: method is nil but Request.RequestType was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRequestType.Lock()
	mock.calls.RequestType = append(mock.calls.RequestType, callInfo)
	mock.lockRequestType.Unlock()
	return mock.RequestTypeFunc()
}

// RequestTypeCalls gets all the calls that were made to RequestType.
// Check the length with:
//
//	len(mockedRequest.RequestTypeCalls())
func (mock *RequestMock) RequestTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRequestType.RLock()
	calls = mock.calls.RequestType
	mock.lockRequestType.RUnlock()
	return calls
}

// ResponseHandler calls ResponseHandlerFunc.
func (mock *RequestMock) ResponseHandler(buffer bytes.Buffer, responseCh chan Response) {
	if mock.ResponseHandlerFunc == nil {
		panic("RequestMock.ResponseHandlerFunc: method is nil but Request.ResponseHandler was just called")
	}
	callInfo := struct {
		Buffer     bytes.Buffer
		ResponseCh chan Response
	}{
		Buffer:     buffer,
		ResponseCh: responseCh,
	}
	mock.lockResponseHandler.Lock()
	mock.calls.ResponseHandler = append(mock.calls.ResponseHandler, callInfo)
	mock.lockResponseHandler.Unlock()
	mock.ResponseHandlerFunc(buffer, responseCh)
}

// ResponseHandlerCalls gets all the calls that were made to ResponseHandler.
// Check the length with:
//
//	len(mockedRequest.ResponseHandlerCalls())
func (mock *RequestMock) ResponseHandlerCalls() []struct {
	Buffer     bytes.Buffer
	ResponseCh chan Response
} {
	var calls []struct {
		Buffer     bytes.Buffer
		ResponseCh chan Response
	}
	mock.lockResponseHandler.RLock()
	calls = mock.calls.ResponseHandler
	mock.lockResponseHandler.RUnlock()
	return calls
}
