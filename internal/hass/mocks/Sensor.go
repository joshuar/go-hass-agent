// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	hass "github.com/joshuar/go-hass-agent/internal/hass"
	mock "github.com/stretchr/testify/mock"
)

// Sensor is an autogenerated mock type for the Sensor type
type Sensor struct {
	mock.Mock
}

// Attributes provides a mock function with given fields:
func (_m *Sensor) Attributes() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Category provides a mock function with given fields:
func (_m *Sensor) Category() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeviceClass provides a mock function with given fields:
func (_m *Sensor) DeviceClass() hass.SensorDeviceClass {
	ret := _m.Called()

	var r0 hass.SensorDeviceClass
	if rf, ok := ret.Get(0).(func() hass.SensorDeviceClass); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorDeviceClass)
	}

	return r0
}

// Disabled provides a mock function with given fields:
func (_m *Sensor) Disabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Sensor) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Icon provides a mock function with given fields:
func (_m *Sensor) Icon() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MarshalJSON provides a mock function with given fields:
func (_m *Sensor) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Sensor) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Registered provides a mock function with given fields:
func (_m *Sensor) Registered() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SensorType provides a mock function with given fields:
func (_m *Sensor) SensorType() hass.SensorType {
	ret := _m.Called()

	var r0 hass.SensorType
	if rf, ok := ret.Get(0).(func() hass.SensorType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorType)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Sensor) State() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// StateClass provides a mock function with given fields:
func (_m *Sensor) StateClass() hass.SensorStateClass {
	ret := _m.Called()

	var r0 hass.SensorStateClass
	if rf, ok := ret.Get(0).(func() hass.SensorStateClass); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorStateClass)
	}

	return r0
}

// UnMarshalJSON provides a mock function with given fields: _a0
func (_m *Sensor) UnMarshalJSON(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Units provides a mock function with given fields:
func (_m *Sensor) Units() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSensor creates a new instance of Sensor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSensor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sensor {
	mock := &Sensor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
