// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	hass "github.com/joshuar/go-hass-agent/internal/hass"
	mock "github.com/stretchr/testify/mock"
)

// SensorUpdate is an autogenerated mock type for the SensorUpdate type
type SensorUpdate struct {
	mock.Mock
}

// Attributes provides a mock function with given fields:
func (_m *SensorUpdate) Attributes() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Category provides a mock function with given fields:
func (_m *SensorUpdate) Category() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeviceClass provides a mock function with given fields:
func (_m *SensorUpdate) DeviceClass() hass.SensorDeviceClass {
	ret := _m.Called()

	var r0 hass.SensorDeviceClass
	if rf, ok := ret.Get(0).(func() hass.SensorDeviceClass); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorDeviceClass)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *SensorUpdate) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Icon provides a mock function with given fields:
func (_m *SensorUpdate) Icon() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *SensorUpdate) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SensorType provides a mock function with given fields:
func (_m *SensorUpdate) SensorType() hass.SensorType {
	ret := _m.Called()

	var r0 hass.SensorType
	if rf, ok := ret.Get(0).(func() hass.SensorType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorType)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *SensorUpdate) State() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// StateClass provides a mock function with given fields:
func (_m *SensorUpdate) StateClass() hass.SensorStateClass {
	ret := _m.Called()

	var r0 hass.SensorStateClass
	if rf, ok := ret.Get(0).(func() hass.SensorStateClass); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hass.SensorStateClass)
	}

	return r0
}

// Units provides a mock function with given fields:
func (_m *SensorUpdate) Units() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSensorUpdate creates a new instance of SensorUpdate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSensorUpdate(t interface {
	mock.TestingT
	Cleanup(func())
}) *SensorUpdate {
	mock := &SensorUpdate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
