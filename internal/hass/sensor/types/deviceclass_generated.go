// Code generated by "stringer -type=DeviceClass -output deviceclass_generated.go -linecomment"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SensorDeviceClassNone-0]
	_ = x[SensorDeviceClassApparentPower-1]
	_ = x[SensorDeviceClassAqi-2]
	_ = x[SensorDeviceClassAtmosphericPressure-3]
	_ = x[SensorDeviceClassBattery-4]
	_ = x[SensorDeviceClassCarbonDioxide-5]
	_ = x[SensorDeviceClassCarbonMonoxide-6]
	_ = x[SensorDeviceClassCurrent-7]
	_ = x[SensorDeviceClassDataRate-8]
	_ = x[SensorDeviceClassDataSize-9]
	_ = x[SensorDeviceClassDate-10]
	_ = x[SensorDeviceClassDistance-11]
	_ = x[SensorDeviceClassDuration-12]
	_ = x[SensorDeviceClassEnergyStorage-13]
	_ = x[SensorDeviceClassEnum-14]
	_ = x[SensorDeviceClassFrequency-15]
	_ = x[SensorDeviceClassGas-16]
	_ = x[SensorDeviceClassHumidity-17]
	_ = x[SensorDeviceClassIlluminance-18]
	_ = x[SensorDeviceClassIrradiance-19]
	_ = x[SensorDeviceClassMoisture-20]
	_ = x[SensorDeviceClassMonetary-21]
	_ = x[SensorDeviceClassNitrogenDioxide-22]
	_ = x[SensorDeviceClassNitrogenMonoxide-23]
	_ = x[SensorDeviceClassNitrousOxide-24]
	_ = x[SensorDeviceClassOzone-25]
	_ = x[SensorDeviceClassPm1-26]
	_ = x[SensorDeviceClassPm25-27]
	_ = x[SensorDeviceClassPm10-28]
	_ = x[SensorDeviceClassPowerFactor-29]
	_ = x[SensorDeviceClassPower-30]
	_ = x[SensorDeviceClassPrecipitation-31]
	_ = x[SensorDeviceClassPrecipitationIntensity-32]
	_ = x[SensorDeviceClassPressure-33]
	_ = x[SensorDeviceClassReactivePower-34]
	_ = x[SensorDeviceClassSignalStrength-35]
	_ = x[SensorDeviceClassSoundPressure-36]
	_ = x[SensorDeviceClassSpeed-37]
	_ = x[SensorDeviceClassSulphurDioxide-38]
	_ = x[SensorDeviceClassTemperature-39]
	_ = x[SensorDeviceClassTimestamp-40]
	_ = x[SensorDeviceClassVOC-41]
	_ = x[SensorDeviceClassVoltage-42]
	_ = x[SensorDeviceClassVolume-43]
	_ = x[SensorDeviceClassWater-44]
	_ = x[SensorDeviceClassWeight-45]
	_ = x[SensorDeviceClassWindSpeed-46]
	_ = x[SensorDeviceClassMax-47]
	_ = x[BinarySensorDeviceClassBattery-48]
	_ = x[BinarySensorDeviceClassBatteryCharging-49]
	_ = x[BinarySensorDeviceClassCO-50]
	_ = x[BinarySensorDeviceClassCold-51]
	_ = x[BinarySensorDeviceClassConnectivity-52]
	_ = x[BinarySensorDeviceClassDoor-53]
	_ = x[BinarySensorDeviceClassGarageDoor-54]
	_ = x[BinarySensorDeviceClassGas-55]
	_ = x[BinarySensorDeviceClassHeat-56]
	_ = x[BinarySensorDeviceClassLight-57]
	_ = x[BinarySensorDeviceClassLock-58]
	_ = x[BinarySensorDeviceClassMoisture-59]
	_ = x[BinarySensorDeviceClassMotion-60]
	_ = x[BinarySensorDeviceClassMoving-61]
	_ = x[BinarySensorDeviceClassOccupancy-62]
	_ = x[BinarySensorDeviceClassOpening-63]
	_ = x[BinarySensorDeviceClassPlug-64]
	_ = x[BinarySensorDeviceClassPower-65]
	_ = x[BinarySensorDeviceClassPresence-66]
	_ = x[BinarySensorDeviceClassProblem-67]
	_ = x[BinarySensorDeviceClassRunning-68]
	_ = x[BinarySensorDeviceClassSafety-69]
	_ = x[BinarySensorDeviceClassSmoke-70]
	_ = x[BinarySensorDeviceClassSound-71]
	_ = x[BinarySensorDeviceClassTamper-72]
	_ = x[BinarySensorDeviceClassUpdate-73]
	_ = x[BinarySensorDeviceClassVibration-74]
	_ = x[BinarySensorDeviceClassWindow-75]
	_ = x[BinarySensorDeviceClassMax-76]
}

const _DeviceClass_name = "apparent_poweraqiatmospheric_pressurebatterycarbon_dioxidecarbon_monoxidecurrentdata_ratedata_sizedatedistancedurationenergy_storageenumfrequencygashumidityilluminanceirradiancemoisturemonetarynitrogen_dioxidenitrogen_monoxidenitrous_oxideozonepm1pm25pm10power_factorpowerprecipitationprecipitation_intensitypressurereactive_powersignal_strengthsound_pressurespeedsulphure_dioxidetemperaturetimestampvocvoltagevolumewaterweightwind_speedSensorDeviceClassMaxbatterybattery_chargingcarbon_monoxidecoldconnectivitydoorgarage_doorgasheatlightlockmoisturemotionmovingoccupancyopeningplugpowerpresenceproblemrunningsafetysmokesoundtamperupdatevibrationwindow"

var _DeviceClass_index = [...]uint16{0, 0, 14, 17, 37, 44, 58, 73, 80, 89, 98, 102, 110, 118, 132, 136, 145, 148, 156, 167, 177, 185, 193, 209, 226, 239, 244, 247, 251, 255, 267, 272, 285, 308, 316, 330, 345, 359, 364, 380, 391, 400, 403, 410, 416, 421, 427, 437, 457, 464, 480, 495, 499, 511, 515, 526, 529, 533, 538, 542, 550, 556, 562, 571, 578, 582, 587, 595, 602, 609, 615, 620, 625, 631, 637, 646, 652, 652}

func (i DeviceClass) String() string {
	if i < 0 || i >= DeviceClass(len(_DeviceClass_index)-1) {
		return "DeviceClass(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DeviceClass_name[_DeviceClass_index[i]:_DeviceClass_index[i+1]]
}
