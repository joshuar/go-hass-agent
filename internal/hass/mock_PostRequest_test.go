// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package hass

import (
	"encoding/json"
	"sync"
)

// Ensure, that PostRequestMock does implement PostRequest.
// If this is not the case, regenerate this file with moq.
var _ PostRequest = &PostRequestMock{}

// PostRequestMock is a mock implementation of PostRequest.
//
//	func TestSomethingThatUsesPostRequest(t *testing.T) {
//
//		// make and configure a mocked PostRequest
//		mockedPostRequest := &PostRequestMock{
//			RequestBodyFunc: func() json.RawMessage {
//				panic("mock out the RequestBody method")
//			},
//		}
//
//		// use mockedPostRequest in code that requires PostRequest
//		// and then make assertions.
//
//	}
type PostRequestMock struct {
	// RequestBodyFunc mocks the RequestBody method.
	RequestBodyFunc func() json.RawMessage

	// calls tracks calls to the methods.
	calls struct {
		// RequestBody holds details about calls to the RequestBody method.
		RequestBody []struct {
		}
	}
	lockRequestBody sync.RWMutex
}

// RequestBody calls RequestBodyFunc.
func (mock *PostRequestMock) RequestBody() json.RawMessage {
	if mock.RequestBodyFunc == nil {
		panic("PostRequestMock.RequestBodyFunc: method is nil but PostRequest.RequestBody was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRequestBody.Lock()
	mock.calls.RequestBody = append(mock.calls.RequestBody, callInfo)
	mock.lockRequestBody.Unlock()
	return mock.RequestBodyFunc()
}

// RequestBodyCalls gets all the calls that were made to RequestBody.
// Check the length with:
//
//	len(mockedPostRequest.RequestBodyCalls())
func (mock *PostRequestMock) RequestBodyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRequestBody.RLock()
	calls = mock.calls.RequestBody
	mock.lockRequestBody.RUnlock()
	return calls
}
