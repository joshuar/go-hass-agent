// Code generated by mockery v2.30.16. DO NOT EDIT.

package api

import mock "github.com/stretchr/testify/mock"

// MockResponse is an autogenerated mock type for the Response type
type MockResponse struct {
	mock.Mock
}

// Disabled provides a mock function with given fields:
func (_m *MockResponse) Disabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *MockResponse) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registered provides a mock function with given fields:
func (_m *MockResponse) Registered() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *MockResponse) Type() RequestType {
	ret := _m.Called()

	var r0 RequestType
	if rf, ok := ret.Get(0).(func() RequestType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(RequestType)
	}

	return r0
}

// NewMockResponse creates a new instance of MockResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponse {
	mock := &MockResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
