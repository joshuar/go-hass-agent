// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"sync"
)

// Ensure, that ConfigMock does implement Config.
// If this is not the case, regenerate this file with moq.
var _ Config = &ConfigMock{}

// ConfigMock is a mock implementation of Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked Config
//		mockedConfig := &ConfigMock{
//			ApiURLFunc: func() string {
//				panic("mock out the ApiURL method")
//			},
//			SecretFunc: func() string {
//				panic("mock out the Secret method")
//			},
//			TokenFunc: func() string {
//				panic("mock out the Token method")
//			},
//			WebSocketURLFunc: func() string {
//				panic("mock out the WebSocketURL method")
//			},
//			WebhookIDFunc: func() string {
//				panic("mock out the WebhookID method")
//			},
//		}
//
//		// use mockedConfig in code that requires Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// ApiURLFunc mocks the ApiURL method.
	ApiURLFunc func() string

	// SecretFunc mocks the Secret method.
	SecretFunc func() string

	// TokenFunc mocks the Token method.
	TokenFunc func() string

	// WebSocketURLFunc mocks the WebSocketURL method.
	WebSocketURLFunc func() string

	// WebhookIDFunc mocks the WebhookID method.
	WebhookIDFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// ApiURL holds details about calls to the ApiURL method.
		ApiURL []struct {
		}
		// Secret holds details about calls to the Secret method.
		Secret []struct {
		}
		// Token holds details about calls to the Token method.
		Token []struct {
		}
		// WebSocketURL holds details about calls to the WebSocketURL method.
		WebSocketURL []struct {
		}
		// WebhookID holds details about calls to the WebhookID method.
		WebhookID []struct {
		}
	}
	lockApiURL       sync.RWMutex
	lockSecret       sync.RWMutex
	lockToken        sync.RWMutex
	lockWebSocketURL sync.RWMutex
	lockWebhookID    sync.RWMutex
}

// ApiURL calls ApiURLFunc.
func (mock *ConfigMock) ApiURL() string {
	if mock.ApiURLFunc == nil {
		panic("ConfigMock.ApiURLFunc: method is nil but Config.ApiURL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockApiURL.Lock()
	mock.calls.ApiURL = append(mock.calls.ApiURL, callInfo)
	mock.lockApiURL.Unlock()
	return mock.ApiURLFunc()
}

// ApiURLCalls gets all the calls that were made to ApiURL.
// Check the length with:
//
//	len(mockedConfig.ApiURLCalls())
func (mock *ConfigMock) ApiURLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockApiURL.RLock()
	calls = mock.calls.ApiURL
	mock.lockApiURL.RUnlock()
	return calls
}

// Secret calls SecretFunc.
func (mock *ConfigMock) Secret() string {
	if mock.SecretFunc == nil {
		panic("ConfigMock.SecretFunc: method is nil but Config.Secret was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSecret.Lock()
	mock.calls.Secret = append(mock.calls.Secret, callInfo)
	mock.lockSecret.Unlock()
	return mock.SecretFunc()
}

// SecretCalls gets all the calls that were made to Secret.
// Check the length with:
//
//	len(mockedConfig.SecretCalls())
func (mock *ConfigMock) SecretCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSecret.RLock()
	calls = mock.calls.Secret
	mock.lockSecret.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *ConfigMock) Token() string {
	if mock.TokenFunc == nil {
		panic("ConfigMock.TokenFunc: method is nil but Config.Token was just called")
	}
	callInfo := struct {
	}{}
	mock.lockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	mock.lockToken.Unlock()
	return mock.TokenFunc()
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//
//	len(mockedConfig.TokenCalls())
func (mock *ConfigMock) TokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockToken.RLock()
	calls = mock.calls.Token
	mock.lockToken.RUnlock()
	return calls
}

// WebSocketURL calls WebSocketURLFunc.
func (mock *ConfigMock) WebSocketURL() string {
	if mock.WebSocketURLFunc == nil {
		panic("ConfigMock.WebSocketURLFunc: method is nil but Config.WebSocketURL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWebSocketURL.Lock()
	mock.calls.WebSocketURL = append(mock.calls.WebSocketURL, callInfo)
	mock.lockWebSocketURL.Unlock()
	return mock.WebSocketURLFunc()
}

// WebSocketURLCalls gets all the calls that were made to WebSocketURL.
// Check the length with:
//
//	len(mockedConfig.WebSocketURLCalls())
func (mock *ConfigMock) WebSocketURLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWebSocketURL.RLock()
	calls = mock.calls.WebSocketURL
	mock.lockWebSocketURL.RUnlock()
	return calls
}

// WebhookID calls WebhookIDFunc.
func (mock *ConfigMock) WebhookID() string {
	if mock.WebhookIDFunc == nil {
		panic("ConfigMock.WebhookIDFunc: method is nil but Config.WebhookID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWebhookID.Lock()
	mock.calls.WebhookID = append(mock.calls.WebhookID, callInfo)
	mock.lockWebhookID.Unlock()
	return mock.WebhookIDFunc()
}

// WebhookIDCalls gets all the calls that were made to WebhookID.
// Check the length with:
//
//	len(mockedConfig.WebhookIDCalls())
func (mock *ConfigMock) WebhookIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWebhookID.RLock()
	calls = mock.calls.WebhookID
	mock.lockWebhookID.RUnlock()
	return calls
}
