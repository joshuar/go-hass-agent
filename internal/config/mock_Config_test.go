// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	context "context"
	"sync"
)

// Ensure, that ConfigMock does implement Config.
// If this is not the case, regenerate this file with moq.
var _ Config = &ConfigMock{}

// ConfigMock is a mock implementation of Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked Config
//		mockedConfig := &ConfigMock{
//			GetFunc: func(s string) (interface{}, error) {
//				panic("mock out the Get method")
//			},
//			RefreshFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Refresh method")
//			},
//			SetFunc: func(s string, ifaceVal interface{}) error {
//				panic("mock out the Set method")
//			},
//			UpgradeFunc: func() error {
//				panic("mock out the Upgrade method")
//			},
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedConfig in code that requires Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(s string) (interface{}, error)

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(contextMoqParam context.Context) error

	// SetFunc mocks the Set method.
	SetFunc func(s string, ifaceVal interface{}) error

	// UpgradeFunc mocks the Upgrade method.
	UpgradeFunc func() error

	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// S is the s argument value.
			S string
			// IfaceVal is the ifaceVal argument value.
			IfaceVal interface{}
		}
		// Upgrade holds details about calls to the Upgrade method.
		Upgrade []struct {
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockGet      sync.RWMutex
	lockRefresh  sync.RWMutex
	lockSet      sync.RWMutex
	lockUpgrade  sync.RWMutex
	lockValidate sync.RWMutex
}

// Get calls GetFunc.
func (mock *ConfigMock) Get(s string) (interface{}, error) {
	if mock.GetFunc == nil {
		panic("ConfigMock.GetFunc: method is nil but Config.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedConfig.GetCalls())
func (mock *ConfigMock) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *ConfigMock) Refresh(contextMoqParam context.Context) error {
	if mock.RefreshFunc == nil {
		panic("ConfigMock.RefreshFunc: method is nil but Config.Refresh was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(contextMoqParam)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//
//	len(mockedConfig.RefreshCalls())
func (mock *ConfigMock) RefreshCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *ConfigMock) Set(s string, ifaceVal interface{}) error {
	if mock.SetFunc == nil {
		panic("ConfigMock.SetFunc: method is nil but Config.Set was just called")
	}
	callInfo := struct {
		S        string
		IfaceVal interface{}
	}{
		S:        s,
		IfaceVal: ifaceVal,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(s, ifaceVal)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedConfig.SetCalls())
func (mock *ConfigMock) SetCalls() []struct {
	S        string
	IfaceVal interface{}
} {
	var calls []struct {
		S        string
		IfaceVal interface{}
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// Upgrade calls UpgradeFunc.
func (mock *ConfigMock) Upgrade() error {
	if mock.UpgradeFunc == nil {
		panic("ConfigMock.UpgradeFunc: method is nil but Config.Upgrade was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUpgrade.Lock()
	mock.calls.Upgrade = append(mock.calls.Upgrade, callInfo)
	mock.lockUpgrade.Unlock()
	return mock.UpgradeFunc()
}

// UpgradeCalls gets all the calls that were made to Upgrade.
// Check the length with:
//
//	len(mockedConfig.UpgradeCalls())
func (mock *ConfigMock) UpgradeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUpgrade.RLock()
	calls = mock.calls.Upgrade
	mock.lockUpgrade.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *ConfigMock) Validate() error {
	if mock.ValidateFunc == nil {
		panic("ConfigMock.ValidateFunc: method is nil but Config.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedConfig.ValidateCalls())
func (mock *ConfigMock) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
