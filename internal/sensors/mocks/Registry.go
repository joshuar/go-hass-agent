// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	fyne "fyne.io/fyne/v2"

	mock "github.com/stretchr/testify/mock"
	sensors "github.com/joshuar/go-hass-agent/internal/sensors"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Registry) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *Registry) Get(_a0 string) (*sensors.RegistryItem, error) {
	ret := _m.Called(_a0)

	var r0 *sensors.RegistryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sensors.RegistryItem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *sensors.RegistryItem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sensors.RegistryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: _a0, _a1
func (_m *Registry) Open(_a0 context.Context, _a1 fyne.URI) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fyne.URI) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: _a0
func (_m *Registry) Set(_a0 sensors.RegistryItem) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(sensors.RegistryItem) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRegistry creates a new instance of Registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registry {
	mock := &Registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
