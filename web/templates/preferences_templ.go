// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
// Copyright 2025 Joshua Rich <joshua.rich@gmail.com>.

// SPDX-License-Identifier: MIT

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/joshuar/go-hass-agent/agent/workers/mqtt"
	"github.com/joshuar/go-hass-agent/validation"
)

type Preferences struct {
	MQTT *mqtt.Config `form:"mqtt"`
}

func NewPreferences() *Preferences {
	return &Preferences{
		MQTT: &mqtt.Config{},
	}
}

// Valid returns a boolean indicating whether
func (p *Preferences) Valid() (bool, error) {
	err := validation.Validate.Struct(p.MQTT)
	if err != nil {
		return false, fmt.Errorf("%w: %s", validation.ErrValidation, validation.ParseValidationErrors(err))
	}

	return true, nil
}

func (r *Preferences) Sanitise() error {
	return nil
}

func PreferencesForm(prefs *Preferences) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"preferences-form\" class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\"><form hx-post=\"/preferences\" hx-target=\"#preferences-form\" hx-swap=\"outerHTML\" hx-include=\"[name='csrf_token']\"><div class=\"space-y-12\"><div class=\"grid grid-cols-1 gap-x-8 gap-y-10 border-b border-base-content/10 pb-12 md:grid-cols-3\"><div><h2 class=\"text-base/7 font-semibold\">MQTT</h2><p class=\"mt-1 text-sm/6 text-base-content/80\">Configure preferences for MQTT functionality.</p></div><div class=\"grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 md:col-span-2\"><div class=\"sm:col-span-4 flex gap-3\"><div class=\"flex h-6 shrink-0 items-center\"><div class=\"group grid size-4 grid-cols-1\"><input id=\"mqtt_enabled\" type=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if prefs.MQTT.MQTTEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " checked=\"checked\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " name=\"mqtt.mqtt_enabled\" aria-describedby=\"mqtt-enabled-description\" class=\"col-start-1 row-start-1 checkbox\" _=\"on click toggle @disabled on #mqtt_server then toggle @disabled on #mqtt_username then toggle @disabled on #mqtt_password then toggle @disabled on #mqtt_topic_prefix\"></div></div><div class=\"text-sm/6\"><label for=\"mqtt_enabled\" class=\"font-medium \">Enabled</label><p id=\"mqtt-enabled-description\" class=\"text-base-content/80\">Toggle MQTT functionality (requires agent restart to take effect).</p></div></div><div class=\"sm:col-span-4\"><label for=\"mqtt_server\" class=\"block text-sm/6 font-medium\">Server</label><div class=\"mt-2\"><input id=\"mqtt_server\" type=\"text\" name=\"mqtt.mqtt_server\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if prefs.MQTT.MQTTServer != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(prefs.MQTT.MQTTServer)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/preferences.templ`, Line: 80, Col: 39}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " class=\"block w-full input\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !prefs.MQTT.MQTTEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "></div></div><div class=\"sm:col-span-3\"><label for=\"mqtt_username\" class=\"block text-sm/6 font-medium\">Username (optional)</label><div class=\"mt-2\"><input id=\"mqtt_username\" type=\"text\" name=\"mqtt.mqtt_username\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if prefs.MQTT.MQTTUser != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(prefs.MQTT.MQTTUser)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/preferences.templ`, Line: 97, Col: 37}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " class=\"block w-full input\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !prefs.MQTT.MQTTEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "></div></div><div class=\"sm:col-span-3\"><label for=\"mqtt_password\" class=\"block text-sm/6 font-medium\">Password (optional)</label><div class=\"mt-2\"><input id=\"mqtt_password\" type=\"password\" name=\"mqtt.mqtt_password\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if prefs.MQTT.MQTTPassword != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, " value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(prefs.MQTT.MQTTPassword)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/preferences.templ`, Line: 114, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, " class=\"block w-full input\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !prefs.MQTT.MQTTEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "></div></div><div class=\"sm:col-span-4\"><label for=\"mqtt_topic_prefix\" class=\"block text-sm/6 font-medium\">Topic Prefix (optional)</label><div class=\"mt-2\"><input id=\"mqtt_topic_prefix\" type=\"text\" name=\"mqtt.mqtt_topic_prefix\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if prefs.MQTT.MQTTTopicPrefix != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, " value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(prefs.MQTT.MQTTTopicPrefix)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/preferences.templ`, Line: 131, Col: 44}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, " value=\"homeassistant\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, " class=\"block w-full input\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !prefs.MQTT.MQTTEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "></div></div></div></div></div><div class=\"mt-6 flex items-center justify-end gap-x-6\"><button type=\"submit\" class=\"btn btn-primary\">Save</button></div></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
